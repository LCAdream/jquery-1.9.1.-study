// 除了可以将全局变量保存到局部变量，在压缩js的时候也可以减少长度
(function(window, undefined) {
    /*
     不是用严格模式因为有的应用和Firefox追踪arguments.caller.callee时会出错
     */
    // 'use strict';
    var
    // 用在DOM加载完成时
    readyList,
        // document的jQuery对象的引用
        rootjQuery,
        // 用'typeof node.method'更胜于'node.emthod !== undefined'
        core_strundefined = typeof undefined,
        // 将全局对象保存到沙箱的局部变量中
        document = window.document,
        location = window.location,
        // 防止jQuery被重写
        _jQuery = window.jQuery,
        // 防止$被重写
        _$ = window.$,

        class2type = {},
        // 被删除的数据的缓存id
        core_deletedIds = [],
        core_version = '1.9.1',
        // 用变量保存核心方法
        core_concat = core_deletedIds.concat,
        core_push = core_deletedIds.push,
        core_slice = core_deletedIds.slice,
        core_indexOf = core_deletedIds.indexOf,
        core_toString = class2type.toString,
        core_hasOwn = class2type.hasOwnProperty,
        core_trim = core_version.trim,

        // 定义一个jQuery的局部拷贝
        // 同时也是一个构造函数
        jQuery = function(selector, context) {
            // 实例化init构造函数
            return new jQuery.fn.init(selector, context, rootjQuery);
        },

        // 匹配数字
        core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

        // 用来分割空白符
        core_rnotwhite = /\S+/g,

        // 去除两端空白符
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

        // 一个检查HTML字符串的简单方式
        // 一种情况是以“<”开头，
        // 另一种则是#id类型的
        rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,
        // 匹配单个标签
        rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

        // JSON正则
        rvalidchars = /^[\],:{}\s]*$/,
        rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
        rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
        rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,

        fcamelCase = function(all, letter) {
            return letter.toUpperCase();
        },
        // 载入完成的事件处理程序
        completed = function(event) {
            // 旧版本IE支持readState === 'complete'
            if (document.addEventListener || event.type === 'load' || document.readyState === 'complete') {
                detach();
                jQuery.ready();
            }
        },
        // 清除domready事件处理程序
        detach = function() {
            if (document.addEventListener) {
                document.removeEventListener('DOMContentLoaded', completed, false);
                window.removeEventListener('load', completed, false);
            } else {
                document.detachEvent('onreadystatechange', completed);
                window.detachEvent('onload', completed);
            }
        };

    /*
     将jQuery的prototype对象的引用指向jQuery.fn，
     当两者其中一个发生改变，另一个也会随之改变。
     jQuery.fn相当于是jQuery.prototype的简写
     */
    jQuery.fn = jQuery.prototype = {
        jQuery: core_version,
        constructor: jQuery,
        // 构造函数
        init: function(selector, context, rootjQuery) {
            var match, elem;
            // 处理 $(""), $(null), $(undefined), $(false)
            // 返回的是jQuery()方法实例
            if (!selector) {
                return this;
            }

            // 处理HTML字符串
            if (typeof selector === 'string') {
                if (selector.charAt(0) === '<' && selector.charAt(selector.length - 1) === '>' && selector.length >= 3) {
                    // 假设字符串以“<”开始且“>”结束
                    // 说明是HTML，略过正则检查
                    match = [null, selector, null];
                } else {
                    match = rquickExpr.exec(selector);
                }

                // 匹配HTML或者确保#id的上下文没被指定
                if (match && (match[1] || !context)) {
                    // 处理 $(html) -> $(array)
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;

                        // 向后兼容
                        jQuery.merge(this, jQuery.parseHTML(
                            match[1],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ));

                        // 处理 $(html, props)
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                //
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }

                        return this;

                        // 处理 $(#id)
                    } else {
                        elem = document.getElementById(match[2]);

                        // 检查parentNode，因为Blackberry 4.6
                        // 返回的节点不在document中
                        if (elem && elem.parentNode) {
                            // 处理Opera返回的是name而不是id
                            if (elem.id !== match[2]) {
                                return rootjQuery.find(selector);
                            }

                            // 给this实例对象添加类似数组的属性
                            this.length = 1;
                            this[0] = elem;
                        }

                        // 再添加上下文，选择器属性，最后返回this，结束函数
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }

                    // 处理 $(expr, [$(...)])
                } else if (!context || context.jQuery) {
                    // 返回jQuery.fn.find()获取的匹配元素，
                    // 该方法会使用jQuery.find方法(即Sizzle)，
                    // 然后通过jQuery.fn.pushStack和merge方法附加元素集及合并
                    return (context || rootjQuery).find(selector);

                    // 处理 $(expr, context)
                    // 即 $(context).find(expr)
                } else {
                    return this.constructor(context).find(selector);
                }

                // 处理$(DOMElement)
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;

                // 处理$(function)
                // jQuery(document) ready的简写
            } else if (jQuery.isFunction(selector)) {
                // 调用jQuery.fn.ready方法
                return rootjQuery.ready(selector);
            }

            // 处理$($(...))
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }

            // 返回伪数组对象
            return jQuery.makeArray(selector, this);
        },
        // 初始为空选择器
        selector: '',
        // jQuery 对象默认长度
        length: 0,
        // 匹配元素集的元素数量，与length相同
        size: function() {
            return this.length;
        },
        toArray: function() {
            return core_slice.call(this);
        },
        // 获取匹配元素集的滴n个元素或者
        // 获取全部匹配元素集的纯数组
        get: function(num) {
            return num == null ?
                this.toArray() :
                (num < 0 ? this[this.length + num] : this[num]);
        },
        // 使用传入的元素生成一个新的jQuery元素,（
        // 将元素数组合并到this对象中）
        // 并将这个对象的prevObject设置成当
        // 前这个实例对象(this).最后将这个新生成的jQuery对象返回
        // 把当前的jQuery对象缓存起来,
        // 以便以后使用end方法恢复这个jQuery对象
        pushStack: function(elems) {
            // 新建一个新的jQuery匹配元素集
            // this.constructor === jQuery
            // jQuery()返回的是this
            // 通过将elems数组merge到this中，使this也具有类似数组的特性，
            // 这就是使用选择器匹配到的元素被合并到this中的原因
            var ret = jQuery.merge(this.constructor(), elems);

            // 把旧对象保存在prevObject属性上
            ret.prevObject = this;
            ret.context = this.context;

            // 返回新的元素集
            return ret;
        },
        // 为每个元素集执行回调函数
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        ready: function(fn) {
            jQuery.ready.promise().done(fn);

            return this;
        },
        /**
         * 将匹配的元素集合缩减为若干个元素。
         * 最后用这个集合重新构建一个jQuery对象,并将其返回.
         * 由于修改了匹配元素集合,所有使用pushStack
         * 来保留一个'恢复点',
         * 以便能使用jQuery.fn.end方法恢复到以前的状态.
         */
        slice: function() {
            return this.pushStack(core_slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length,
                j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },

        push: core_push,
        sort: [].sort,
        splice: [].splice
    };

    // 延迟实例化
    /*
     这里将init的构造函数原型指向jQuery.fn（即jQuery原型），
     当我们给jQuery.fn扩展方法或属性的时候，实际上就是给init.prototype,
     而jQuery()方法返回的是init构造函数的实例化对象，所以jQuery()就是其实例对象，
     具有了其方法和属性。
     */
    jQuery.fn.init.prototype = jQuery.fn;

    /*
     用一个或多个其他对象来扩展一个对象，返回被扩展的对象
     */
    // jQuery.extend(target, [object1], [objectN])
    // jQuery.extend([deep], target, object1, [objectN])
    // jQuery.fn.extend就是jQuery.fn.init.prototype.extend,
    // 所以this就是init的实例化对象，即jQuery(..)
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // 处理 深拷贝的情况
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[1] || {};
            // 略过布尔值
            i = 2;
        }

        // target非对象或函数则强制转换为空对象
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
            target = {};
        }

        // 当只有一个参数或者深度拷贝的两个参数时说明是扩展jQuery或者jQuery.fn
        if (length === i) {
            target = this;
            --i;
        }

        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    // 避免循环递归, 不把自己的引用作为自己的一个成员
                    if (target === copy) {
                        continue;
                    }

                    // 递归深度拷贝的对象或数组
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }

                        // 递归调用
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        // 返回被修改的对象
        return target;
    };

    jQuery.extend({
        // 防止版本冲突，需要放在最前面
        noConflict: function(deep) {
            if (window.$ === jQuery) {
                window.$ = _$;
            }

            if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery;
            }

            return jQuery;
        },
        // 用作DOM加载完毕
        isReady: false,
        // 一个计数器，用于跟踪在ready事件出发前的等待次数
        readyWait: 1,
        // 继续等待或触发
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        // 文档加载完毕句柄
        ready: function(wait) {
            // 当挂起或者已经ready时，退出
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }

            // 确保document.body存在
            if (!document.body) {
                return setTimeout(jQuery.ready);
            }

            // DOM已经ready
            jQuery.isReady = true;

            // If a normal DOM Ready event fired,
            // decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith(document, [jQuery]);

            // Trigger any bound ready events
            if (jQuery.fn.trigger) {
                jQuery(document).trigger("ready").off("ready");
            }
        },
        isFunction: function(obj) {
            return jQuery.type(obj) === 'function';
        },
        isArray: Array.isArray || function(obj) {
            return jQuery.type(obj) === 'array';
        },
        isWindow: function(obj) {
            return obj != null && obj == obj.window;
        },
        isNumeric: function(obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj);
        },
        /**
         * 检测obj的数据类型
         */
        type: function(obj) {
            if (obj == null) {
                return String(obj);
            }
            return typeof obj === 'object' || typeof obj === 'function' ?
                class2type[core_toString.call(obj)] || 'object' :
                typeof obj;
        },
        isPlainObject: function(obj) {
            // 必须是对象
            // 因为IE，我们不得不检查当前对象的constructor属性
            // 确保DOM节点与window对象不能通过
            if (!obj || jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }

            try {
                if (obj.constructor && !core_hasOwn.call(obj, 'constructor') && !core_hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
                    return false;
                }
            } catch (e) {
                // IE8,9会抛出错误（宿主对象）
                return false;
            }

            // 自身属性是可被枚举的
            // 如果最后一个属性是自身的，说明全部属性都是
            var key;
            for (key in obj) {}

            return key === undefined || core_hasOwn.call(obj, key);
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        error: function(msg) {
            throw new Error(msg);
        },
        /**
         *
         * @param data string of html
         * @param context (optional) If specified, the fragment will be created in this context, defaults to document
         * @param keepScripts (optional): If true, will include scripts passed in the html string
         */
        parseHTML: function(data, context, keepScripts) {
            if (!data || typeof data !== 'string') {
                return null;
            }
            if (typeof context === 'boolean') {
                keepScripts = context;
                context = false;
            }
            context = context || document;

            var parsed = rsingleTag.exec(data),
                scripts = !keepScripts && [];

            // Single tag
            if (parsed) {
                return [context.createElement(parsed[1])];
            }

            parsed = jQuery.buildFragment([data], context, scripts);
            if (scripts) {
                jQuery(scripts).remove();
            }
            return jQuery.merge([], parsed.childNodes);
        },
        /**
         * 接受一个JSON字符串，返回解析后的对象
         * @param data
         * @returns {*}
         */
        parseJSON: function(data) {
            // 优先使用原生JSON解析器
            if (window.JSON && window.JSON.parse) {
                return window.JSON.parse(data);
            }

            if (data === null) {
                return data;
            }

            if (typeof data === 'string') {
                // 确保没有首尾空白
                data = jQuery.trim(data);

                if (data) {
                    if (rvalidchars.test(data
                        .replace(rvalidescape, '@')
                        .replace(rvalidtokens, '}')
                        .replace(rvalidbraces, ''))) {
                        return (new Function('return ' + data))();
                    }
                }
            }

            jQuery.error('Invalid JSON: ' + data);
        },
        // 跨浏览器XML解析
        parseXML: function(data) {
            var xml, tmp;
            if (!data || typeof data !== 'string') {
                return null;
            }
            try {
                if (window.DOMParser) {
                    // standard
                    tmp = new DOMParser();
                    xml = tmp.parseFromString(data, 'text/xml');
                } else {
                    // ie
                    xml = new ActiveXObject('Microsoft.XMLDOM');
                    xml.async = 'false';
                    xml.loadXML(data);
                }
            } catch (e) {
                xml = undefined;
            }
            if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length) {
                jQuery.error('Invalid XML: ' + data);
            }
            return xml;
        },
        noop: function() {},
        // 在全局环境中运行字符串脚本
        globalEval: function(data) {
            // IE用execScript
            // 使用自执行匿名函数使eval的上下文指向window而不是jQuery（Firefox中）
            if (data && jQuery.trim(data)) {
                (window.execScript || function(data) {
                    window['eval'].call(window, data);
                })(data);
            }
        },
        // Convert dashed to camelCase; used by the css and data modules
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function(string) {
            return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        /**
         * 通用遍历方法，可用于遍历对象和数组
         */
        each: function(obj, callback, args) {
            var value,
                i = 0,
                length = obj.length,
                isArray = isArraylike(obj);

            if (args) {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.apply(obj[i], args);

                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);

                        if (value === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);

                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);

                        if (value === false) {
                            break;
                        }
                    }
                }
            }

            return obj;
        },
        /**
         * 去掉字符串起始和结尾的空格
         */
        trim: core_trim && !core_trim.call('\uFEFF\xA0') ? function(text) {
            return text == null ?
                '' :
                core_trim.call(text);
        } : function(text) {
            return text == null ?
                '' :
                (text + '').replace(rtrim, '');
        },
        // 将类数组对象转换为数组对象。
        makeArray: function(arr, results) {
            var ret = results || [];

            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret,
                        typeof arr === 'string' ?
                        [arr] : arr
                    );
                } else {
                    core_push.call(ret, arr);
                }
            }

            return ret;
        },
        /**
         * 确定第一个参数在数组中的位置，从0开始计数(如果没有找到则返回 -1 )。
         * @param elem 用于在数组中查找是否存在
         * @param arr 待处理数组
         * @param i 用来搜索数组队列，默认值为0
         * @returns {*}
         */
        inArray: function(elem, arr, i) {
            var len;
            if (arr) {
                if (core_indexOf) {
                    return core_indexOf.call(arr, elem, i);
                }

                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

                for (; i < len; i++) {
                    if (i in arr && arr[i] === elem) {
                        return i;
                    }
                }
            }

            return -1;
        },
        /**
         * 合并两个数组(或类数组)
         * 返回合并后的第一个内容
         */
        merge: function(first, second) {
            var l = second.length,
                i = first.length,
                j = 0;

            if (typeof l === 'number') {
                for (; j < l; j++) {
                    first[i++] = second[j];
                }
            } else {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }

            first.length = i;

            return first;
        },
        /**
         * 使用过滤函数过滤数组元素
         * @param elems 待过滤数组
         * @param callback 此函数将处理数组每个元素。第一个参数为当前元素，第二个参数而元素索引值。此函数应返回一个布尔值
         * @param inv 如果 "invert" 为 false 或为设置，则函数返回数组中由过滤函数返回 true 的元素，当"invert" 为 true，则返回过滤函数中返回 false 的元素集
         */
        grep: function(elems, callback, inv) {
            var retVal,
                ret = [],
                i = 0,
                length = elems.length;
            inv = !! inv;

            for (; i < length; i++) {
                retVal = !! callback(elems[i], i);
                if (inv !== retVal) {
                    ret.push(elems[i]);
                }
            }

            return ret;
        },
        /**
         * 将一个数组中的元素转换到另一个数组中
         * 作为参数的转换函数会为每个数组元素调用，而且会给这个转换函数传递一个表示被转换的元素作为参数。转换函数可以返回转换后的值、null（删除数组中的项目）或一个包含值的数组，并扩展至原始数组中
         */
        map: function(elems, callback, arg) {
            var value,
                i = 0,
                length = elems.length,
                isArray = isArraylike(elems),
                ret = [];

            // 遍历数组
            if (isArray) {
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
                // 遍历对象
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            }

            // 拼合任何嵌套数组
            return core_concat.apply([], ret);
        },
        guid: 1,
        /**
         * 函数绑定
         * @example 两者效果一样：
         *   $("#test").click( jQuery.proxy( obj, "test" ) );
         *   $("#test").click( jQuery.proxy( obj.test, obj ) );
         */
        proxy: function(fn, context) {
            var args, proxy, tmp;

            if (typeof context === 'string') {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }

            if (!jQuery.isFunction(fn)) {
                return undefined;
            }

            // 模拟bind
            // 将第二个参数后面的所有参数转换成数组
            args = core_slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)));
            };

            // 设置一个唯一的guid属性，以便我们可以删除绑定
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;

            return proxy;
        },
        /**
         * 多功能函数，读取或设置集合的属性值；值为函数时会被执行
         * elems 元素集 chainable 是否链式操作
         */
        access: function(elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0,
                length = elems.length,
                bulk = key == null;

            // 如果key是对象，迭代设置多个值
            if (jQuery.type(key) === 'object') {
                chainable = true;
                for (i in key) {
                    jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
                }
                // 否则， 设置一个值
            } else if (value !== undefined) {
                // 当value非空时，设置为链式操作
                chainable = true;

                // 当value不是函数时，将raw设为true，
                // 用来标识value的值
                if (!jQuery.isFunction(value)) {
                    raw = true;
                }

                // 当key==null为true时
                if (bulk) {
                    // 如果value不是函数，则立刻执行fn方法,并将fn设置为空，用来阻止下面条件的触发
                    if (raw) {
                        fn.call(elems, value);
                        fn = null;
                        // 如果value是函数，则修改fn的参数
                    } else {
                        bulk = fn;
                        fn = function(elem, key, value) {
                            return bulk.call(jQuery(elem), value);
                        };
                    }
                }

                // 此时如果fn仍为非空
                if (fn) {
                    // 遍历元素集，每次都运行fn方法
                    for (; i < length; i++) {
                        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                    }
                }
            }

            // 如果是链式操作就返回元素集，
            // 否则， 当bulk为true时，即
            // key==null或者key==null且value的类型是函数时，
            // 返回fn运行后的值，
            // bulk其他值的情况：
            // 如果存在elems元素集，返回fn运行后的值，
            // 否则就返回emptyGet
            return chainable ? elems :
                bulk ?
                fn.call(elems) :
                length ? fn(elems[0], key) : emptyGet;
        },
        now: function() {
            return (new Date()).getTime();
        }
    });

    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();

            if (document.readyState === 'complete') {
                setTimeout(jQuery.ready);
            } else if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', completed, false);
                window.addEventListener('load', completed, false);
            } else {
                document.attachEvent('onreadystatechange', completed);

                window.attachEvent('onload', completed);

                var top = false;
                try {
                    top = window.frameElement == null && document.documentElement;
                } catch (e) {}

                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {
                            try {
                                top.doScroll('left');
                            } catch (e) {
                                return setTimeout(doScrollCheck, 50);
                            }

                            detach();

                            jQuery.ready();
                        }
                    })();
                }
            }
        }

        return readyList.promise(obj);
    };

    jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function(i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
    });

    // 判断是否具有数组特性
    // 包括纯数组，伪数组以及对象模拟的数组

    function isArraylike(obj) {
        var length = obj.length,
            type = jQuery.type(obj);

        // 如果是window对象返回false
        if (jQuery.isWindow(obj)) {
            return false;
        }

        // 如果是nodeList伪数组，返回true
        if (obj.nodeType === 1 && length) {
            return true;
        }

        // 当是数组返回true，
        // 不能包括函数类型且如果是用对象模拟的数组类型也可以通过
        // 其中必须有length属性和第length-1个属性也是自身属性
        // 类似鸭式辩型
        return type === 'array' || type !== 'function' &&
            (length === 0 || typeof length === 'number' && length > 0 && (length - 1) in obj);
    }

    // jQuery 根对象
    rootjQuery = jQuery(document);

    var optionsCache = {};

    /*
     根据字符串格式的参数创建对象的键值对象，
     并且返回一个object变量存储已经存在的key参数，且value值为true,
     与optionsCache引用同一个对象
     */

    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }

    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *	确保这个回调列表只执行一次.
     *
     *	memory:			will keep track of previous values and will call any callback added after the list has been fired right away with the latest "memorized" values (like a Deferred)
     * 当回调列表已经被触发调用了，我们再给列表添加回调的时候将会执行该回调
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     * 确保一个回调再列表中只会被添加一次(即列表不能有重复的回调).
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     * 当一个回调返回false 时中断调用
     */
    jQuery.Callbacks = function(options) {
        // 将options字符串格式转换为对象格式
        // 先检查是否已有缓存
        options = typeof options === 'string' ?
            (optionsCache[options] || createOptions(options)) :
            jQuery.extend({}, options);

        var
        // 用来标识列表是否正在触发
        firing,
            // 上一次触发的值 （备忘列表）
            memory,
            // 列表已被触发的标识
            fired,
            // 回调列表的长度
            firingLength,
            // 当前触发的回调索引值
            firingIndex,
            // 第一个要触发的回调函数
            // (used internally by add and fireWith)
            firingStart,
            // 回调列表
            list = [],
            // 可重复的回调函数堆栈，用于控制触发回调时的参数列表
            // flags不能为once
            stack = !options.once && [],
            // 触发回调方法，结束了当前队列，
            // 如果还有其他等待队列，则也触发
            fire = function(data) {
                // 如果flags包含memory，则记录data
                // 值是一个数组第一个元素是fireWith的context对象，第二个则是fire方法的参数伪数组
                memory = options.memory && data;
                // 标记已触发
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                // 标记正在触发回调
                firing = true;
                // 遍历回调列表
                for (; list && firingIndex < firingLength; firingIndex++) {
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        // 强制将memory设置为false
                        // 阻止未来可能由于add所产生的回调
                        memory = false;
                        //由于参数stopOnFalse为true，所以当有回调函数返回值为false时退出循环
                        break;
                    }
                }
                // 标记回调结束
                firing = false;
                // 如果列表存在
                if (list) {
                    // 如果堆栈存在(非once的情况)
                    if (stack) {
                        // 如果堆栈不为空
                        if (stack.length) {
                            // 从堆栈头部取出，递归fire
                            fire(stack.shift());
                        }

                        // 否则，如果有记忆(memory && ((once && unique) || once))
                    } else if (memory) {
                        // 列表清空
                        list = [];

                        // 再否则阻止回调列表中的回调 (once || (once && unique))
                    } else {
                        self.disable();
                    }
                }
            },
            // 暴露在外的Callbacks对象
            self = {
                /**
                 * 回调列表中添加一个回调或回调的集合。
                 * {arguments} 一个函数，或者一个函数数组用来添加到回调列表
                 * @returns {*}
                 */
                add: function() {
                    if (list) {
                        // 首先存储当前列表长度
                        var start = list.length;
                        (function add(args) {
                            jQuery.each(args, function(_, arg) {
                                var type = jQuery.type(arg);
                                // 如果是函数
                                if (type === 'function') {
                                    // 确保是否可以重复或者没有该回调
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }

                                    // 如果是类数组或对象
                                } else if (arg && arg.length && type !== 'string') {
                                    // 递归
                                    add(arg);
                                }
                            });
                        })(arguments);

                        // 如果正在回调就将回调时的循环结尾变成现有长度
                        if (firing) {
                            firingLength = list.length;

                            // 否则如果有memory，我们立刻调用
                            // 前面至少有一次fire，这样memory才会有值
                        } else if (memory) {
                            firingStart = start;
                            fire(memory);
                        }
                    }

                    return this;
                },
                /*
                 删除回调或回调回调列表的集合
                 */
                remove: function() {
                    if (list) {
                        jQuery.each(arguments, function(_, arg) {
                            var index;
                            // 找到arg在列表中的位置
                            while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                // 根据得到的位置删除列表中的回调函数
                                list.splice(index, 1);

                                // 如果正在回调过程中，则调整循环的索引和长度
                                // 继续下次循环
                                if (firing) {
                                    if (index <= firingLength) {
                                        firingLength--;
                                    }
                                    if (index <= firingIndex) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }

                    return this;
                },
                // 回调函数是否在列表中
                has: function(fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : !! (list && list.length);
                },
                // 从列表中删除所有回调函数
                empty: function() {
                    list = [];
                    return this;
                },
                /*
                 禁用回调列表中的回调
                 */
                disable: function() {
                    list = stack = memory = undefined;
                    return this;
                },
                // 判断是否被禁用了
                disabled: function() {
                    return !list;
                },
                // 锁定列表
                lock: function() {
                    stack = undefined;
                    if (!memory) {
                        self.disable();
                    }
                    return this;
                },
                locked: function() {
                    return !stack;
                },
                /**
                 * 以给定的上下文和参数调用所有回调函数
                 * @param context 上下文
                 * @param args
                 * @returns {*}
                 */
                fireWith: function(context, args) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];

                    if (list && (!fired || stack)) {
                        // 如果正在回调
                        if (firing) {
                            // 将参数推入堆栈，等待当前回调结束再调用
                            stack.push(args);

                            // 否则直接调用
                        } else {
                            fire(args);
                        }
                    }

                    return this;
                },
                // 以给定的参数调用所有回调函数
                fire: function() {
                    self.fireWith(this, arguments);
                    return this;
                },
                // 回调列表是否被触发过
                fired: function() {
                    return !!fired;
                }
            };

        return self;
    };

    jQuery.extend({
        Deferred: function(func) {
            // 数据集中管理
            var tuples = [
                ['resolve', 'done', jQuery.Callbacks('once memory'), 'resolved'],
                ['reject', 'fail', jQuery.Callbacks('once memory'), 'rejected'],
                ['notify', 'progress', jQuery.Callbacks('memory')]
            ],
                state = 'pending',
                promise = {
                    /**
                     * 返回一个字符串，代表Deferred（延迟）对象的当前状态
                     *
                     * @returns {string} "pending"( Deferred对象是尚未完成状态) || "rejected"(Deferred对象是在被拒绝的状态) || "resolved"(Deferred对象是在解决状态)
                     */
                    state: function() {
                        return state;
                    },
                    /**
                     * 当Deferred（延迟）对象解决或拒绝时，调用添加处理程序
                     * 即如果调用后不管成功还是失败，都会执行该回调
                     */
                    always: function() {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    /**
                     * 
                     * then方法会返回一个新的Deferred对象
                     * 如果then方法的参数是deferred对象，
                     * 上一链的旧deferred会调用[ done | fail | progress ]方法注册回调，该回调内容是：执行when方法对应的参数回调（fnDone, fnFail, fnProgress）。
                     * 1）如果参数回调执行后返回的结果是一个deferred对象，我们就给该deferred对象相应的回调列表添加回调，该回调是触发when方法返回的新deferred对象的成功，失败，处理中（done，fail，progress）的回调列表中的所有回调。
                     * 当我们再给then方法进行链式地添加回调操作（done,fail,progress,always,then）时，就是给新deferred对象注册回调到相应的回调列表。
                     * 如果我们then参数fnDoneDefer, fnFailDefer, fnProgressDefer得到了解决，就会执行后面链式添加回调操作中的参数函数。
                     * 
                     * 2）如果参数回调执行后返回的结果不是deferred对象，就立刻触发新deferred对象相应回调列表的所有回调。
                     * 当我们再给then方法进行链式地添加回调操作（done,fail,progress,always,then）时，就会立刻触发我们添加的相应的回调。
                     * 
                     * 可以多个then连续使用，此功能相当于顺序调用异步回调。
                     *
                     * @example
                     * $.ajax({
                           url: 't2.html',
                           dataType: 'html',
                           data: {
                              d: 4
                           }
                        }).then(function(){
                            console.log('success');
                        },function(){
                            console.log('failed');
                        }).then(function(){
                            console.log('second');
                            return $.ajax({
                                url: 'jquery-1.9.1.js',
                                dataType: 'script'
                            });
                        }, function(){
                            console.log('second f');
                            return $.ajax({
                                url: 'jquery-1.9.1.js',
                                dataType: 'script'
                            });
                        }).then(function(){
                            console.log('success2');
                        },function(){
                            console.log('failed2');
                        });
                        @notification 当前面的deferred没有被解决即失败，后面的就会执行失败回调，如果then方法中传了两个可返回deferred对象的回调，上一个deferred失败就会触发第二个返回的deferred，如果只传了一个返回deferred的回调，则后面都会报错。后面的失败却不会影响前面的。
                     * @returns {*}
                     */
                    then: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
                        // 返回一个新的Deferred对象的promise对象
                        return jQuery.Deferred(function(newDefer) {
                            // newDefer其实就是一个新的deferred对象
                            jQuery.each(tuples, function(i, tuple) {
                                var
                                // "resolve" | "reject" | "notify"
                                action = tuple[0],
                                    fn = jQuery.isFunction(fns[i]) && fns[i];

                                // 运行deferred[ done | fail | progress ]方法，
                                // 将回调函数添加到相应回调列表
                                deferred[tuple[1]](function() {
                                    // 执行当前参数回调并获取其返回值
                                    var returned = fn && fn.apply(this, arguments);
                                    // 如果returned有返回值且有promise方法，
                                    // 说明是一个deferred对象，
                                    // 则将newDefer对象的三个回调列表的触发器添加到returned对象的相应列表中
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise().
                                        done(newDefer.resolve).
                                        fail(newDefer.reject).
                                        progress(newDefer.notify);
                                    } else {
                                        // 否则就触发newDefer对象的相应回调列表触发器
                                        // 同时确保this指向newDefer的promise对象
                                        // 要是这个newDefer有内容触发需要再在后面将回调添加到响应列表中，
                                        // 所以这个是执行下一个deferred的操作
                                        newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            // 销毁对象
                            fns = null;
                        }).promise();
                    },
                    /*
                     如果有参数返回参数对象继承了promise对象属性的对象，
                     否则返回该Deferred对象中的promise对象
                     */
                    promise: function(obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                },
                deferred = {};

            // 备份原始对象
            promise.pipe = promise.then;

            // 给deferred对象添加方法
            jQuery.each(tuples, function(i, tuple) {
                var
                // jQuery.Callbacks()
                list = tuple[2],
                    // "resolved" or "rejected"
                    stateString = tuple[3];

                // 给promise对象添加"done", "fail", "progress"方法
                // 当使用这些方法实际上就是给所在回调列表添加回调
                // 注意：list.add方法里面的this已经指向了promise
                // 因此可以deferred.done(arguments).fail(arguments)的链式操作
                promise[tuple[1]] = list.add;

                // 如果是"resolved"或者"rejected"
                if (stateString) {
                    // 给相应的回调列表添加以下三个回调函数，回调列表状态机
                    // 第一个是将异步队列状态传给state变量
                    // 第二个方法是将其他状态的列表禁用
                    // 第三个是锁定“progress”的回调列表
                    // 例如是“resolved”则禁用“rejected”的回调列表，
                    // 锁定“progress”的回调列表
                    list.add(function() {
                        state = stateString;
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }

                // 添加deferred[ resolve | reject | notify ]方法
                deferred[tuple[0]] = function() {
                    // 实际上是运行deferred[ resolveWith | rejectWith | notifyWith ]方法
                    // 同时确保上下文是deferred对象
                    deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
                    // 链式操作
                    return this;
                };
                // 添加deferred[ resolveWith | rejectWith | notifyWith ]方法
                // 这些方法就是所在回调列表的fireWith方法
                // 通过给定上下文触发列表所有回调函数
                deferred[tuple[0] + 'With'] = list.fireWith;
            });

            // 给deferred对象添加promise对象的所有属性
            promise.promise(deferred);

            if (func) {
                // 运行该函数，this和arguments都是deferred对象
                func.call(deferred, deferred);
            }

            // 返回deferred对象
            // 该对象现有 [ resolve | reject | notify | resolveWith | rejectWith | notifyWith ]
            // 以及从promise继承的 [ done | fail | then | promise | pipe | always | progress | state ]
            // 这些方法
            return deferred;
        },
        /**
         * 对多个deferred对象进行并行化操作，当所有deferred对象都得到解决就执行后面添加的相应回调。
         */
        when: function(subordinate /* , ..., subordinateN */ ) {
            var i = 0,
                // 把arguments转换成数组
                resolveValues = core_slice.call(arguments),
                // 参数的长度
                length = resolveValues.length,
                // 如果长度不等于1或者第一个参数是deferred对象，
                // 返回true，最后返回正常长度
                // 否则返回0
                // 说明参数必须是deferred对象，而remaining是记录执行剩余的长度
                remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,
                // 主要的Deferred对象。如果resolveValues只有一个Deferred对象
                // 使用该对象，否则新建一个Deferred对象
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
                // 当为resolve或者progress的情况时的处理函数
                updateFunc = function(i, contexts, values) {
                    return function(value) {
                        contexts[i] = this;
                        // values是when参数数组或者progressValues
                        // 如果参数大于一，values[i]为参数数组
                        // 以$.ajax为例，$.ajax的解决回调的参数values[i] = [response, 'success', jqXHR]
                        // 所以在下次我们给列表添加回调时，回调的参数类似于这样[firsetAjaxCallbackArgs, secondAjaxCallbackArgs]
                        // firsetAjaxCallbackArgs为第一个ajax的[resposne, 'success', jqXHR]
                        // 以此类推
                        /**
                         * $.when(
                               $.ajax({
                                url: 't2.html'
                            }),
                             $.ajax({
                                url: 'jquery-1.9.1-study.js'
                            })
                            ).then(function(                    FirstAjaxSuccessCallbackArgs, SecondAjaxSuccessCallbackArgs){
                                 console.log('success');
                            }, function(){
                                console.log('failed');
                            });
                         */
                        values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                        // progress
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);

                            // 将remaining减一，说明该when参数的deferred已经回调注册完毕
                            // 如果这时remaining小于等于0，
                            // 说明我们正在解决最后一个参数deferred，
                            // 就立刻触发deferred的回调，注意这里的deferred不是参数的deferred
                            // 这里就达到了并行的效果了
                        } else if (!(--remaining)) {
                            // deferred需要在外部给回调列表注册回调
                            // resolve
                            deferred.resolveWith(contexts, values);
                        }
                    };
                },
                progressValues, progressContexts, resolveContexts;

            // 当至少有两个Deferred对象时
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    // 遍历，如果是deferred对象，给when参数中当前的deferred的回调列表添加回调
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise()
                            .done(updateFunc(i, resolveContexts, resolveValues))
                            .fail(deferred.reject)
                            .progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        // 否则不是deferred对象直接将remaining的长度-1
                        --remaining;
                    }
                }
            }

            // 当remaining为0的时候，也就是length===1或者when参数没有deferred对象时，立刻触发
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }

            // 返回promise对象
            return deferred.promise();
        }
    });

    jQuery.support = (function() {
        var support, all, a,
            input, select, fragment,
            opt, eventName, isSupported, i,
            div = document.createElement('div');

        // Setup
        div.setAttribute('className', 't');
        div.innerHTML = '<link/><table></table><a href="/a">a</a><input type="checkbox"/>';

        // 在受限制或者非浏览器的环境中退出
        all = div.getElementsByTagName('*');
        a = div.getElementsByTagName('a')[0];
        if (!all || !a || !all.length) {
            return {};
        }

        // First batch of tests
        select = document.createElement('select');
        opt = select.appendChild(document.createElement('option'));
        input = div.getElementsByTagName('input')[0];

        a.style.cssText = 'top:1px;float:left;opacity:.5';
        support = {
            // 测试setAttribute是否会将className转换为络峰式
            // 如果是，我们需要在（ie6/7）的get/setAttribute使用attrFixes
            getSetAttribute: div.className !== 't',
            // 当使用.innerHTML检查是否有前置空白
            leadingWhitespace: div.firstChild.nodeType === 3,
            // 确保tbody不会自动插入到table里
            // IE会给空的table自动添加
            tbody: !div.getElementsByTagName('tbody').length,
            // 确保link元素在innerHTML中正确序列化
            // IE需要一个包裹元素
            htmlSerialize: !! div.getElementsByTagName('link').length,
            // 通过使用getAttribute获取style样式
            // IE使用.cssText
            style: /top/.test(a.getAttribute('style')),
            // 确保URLs不会被操纵
            // IE默认会标准化
            hrefNormalized: a.getAttribute('href') === '/a',
            // 确保元素的opacity属性值正确存在
            // （IR使用filter）
            // 这里用正则来解决webkit的一个问题
            opacity: /^0.5/.test(a.style.opacity),
            // 验证style的float
            // IE使用cssFloat
            cssFloat: !! a.style.cssFloat,
            // 检查默认checkbox/radio的value值
            // （webkit为“”， 其它为“on”）
            checkOn: !! input.value,
            // 确保select默认被选中的option有正确的selected属性
            // 在optgroup中，webkit和IE默认为false
            optSelected: opt.selected,
            // 测试form是否支持enctype
            enctype: !! document.createElement('form').enctype,
            // 确保深度克隆一个html5元素的时候不会出现outerHTML为undefined的情况
            html5Clone: document.createElement('nav').cloneNode(true).outerHTML !== '<:nav></:nav>',
            // 该属性在1.8中被弃用了，现在又重用了
            boxModel: document.compatMode === 'CSS1Compat',
            // 后期要用被重定义的
            deleteExpando: true,
            noCloneEvent: true,
            inlineBlockNeedsLayout: false,
            shrinkWrapBlocks: false,
            reliableMarginRight: true,
            boxSizingReliable: true,
            pixelPosition: false
        };

        // 确保checked状态也被克隆
        input.cheked = true;
        support.noCloneChecked = input.cloneNode(true).checked;

        // 确保select被禁用时，option元素没有被禁用
        // webkit会标记为禁用
        select.disabled = true;
        support.optDisabled = !opt.disabled;

        // Support: IE<9
        try {
            delete div.test;
        } catch (e) {
            support.deleteExpando = false;
        }

        // 我们是否要信任getAttribute('value')
        input = document.createElement('input');
        input.setAttribute('value', '');
        support.input = input.getAttribute('value') === '';

        // 检查input把type设置为radio后，是否还保留原来的value
        input.value = 't';
        input.setAttribute('type', 'radio');
        support.raduiValue = input.value === 't';

        // webkit会失去选中当name在checked属性设置后设置
        input.setAttribute('checked', 't');
        input.setAttribute('name', 't');

        fragment = document.createDocumentFragment();
        fragment.appendChild(input);

        // 检查当插入到DOM中的失去联系的checkbox是否保留着value的值为true
        support.appendChecked = input.checked;

        // webkit在文档碎片中不会正确克隆checked状态
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;

        // Support: IE<9
        // Opera不会克隆事件（typeof div.attachEvent===undefined）
        // IE9-10通过attachEvent绑定的事件不会触发click()
        if (div.attachEvent) {
            div.attachEvent('onclick', function() {
                support.noCloneEvent = false;
            });

            div.cloneNode(true).click();
        }

        // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
        // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
        for (i in {
            submit: true,
            change: true,
            focusin: true
        }) {
            div.setAttribute(eventName = 'on' + i, 'i');

            support[i + 'Bubble'] = eventName in window || div.attributes[eventName].expando === false;
        }

        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';

        // 当文档加载完毕后进行测试
        jQuery(function() {
            var container, marginDiv, tds,
                divReset = 'padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content:box;',
                body = document.getElementsByTagName('body')[0];

            if (!body) {
                // frameset没有body
                return;
            }

            container = document.createElement('div');
            container.style.cssText = 'border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px;';

            body.appendChild(container).appendChild(div);

            // Support: IE8
            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            div.innerHTML = '<table><tr><td></td><td>t</td></tr></table>';
            tds = div.getElementsByTagName('td');
            tds[0].style.cssText = 'padding:0;margin:0;border:0;display:none;';
            isSupported = (tds[0].offsetHeight === 0);

            tds[0].style.display = '';
            tds[1].style.display = 'none';

            // Support: IE8
            // 检查空的单元格是否仍然有offsetWidth/Height
            support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0);

            // 检查box-sizing和margin行为
            div.innerHTML = '';
            div.style.cssText = 'box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top1%;';
            support.boxSizing = (div.offsetWidth === 4);
            support.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== 1);

            // Use window.getComputedStyle because jsdom on node.js will break without it.
            if (window.getComputedStyle) {
                support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== '1%';
                support.boxSizingReliable = (window.getComputedStyle(div, null) || {
                    width: '4px'
                }).width === '4px';

                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. (#3333)
                // Fails in WebKit before Feb 2011 nightlies
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                marginDiv = div.appendChild(document.createElement('div'));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = '0';
                div.style.width = '1px';

                support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
            }

            if (typeof div.style.zoom !== core_strundefined) {
                // Support: IE<8
                // Check if natively block-level elements act like inline-block
                // elements when setting their display to 'inline' and giving
                // them layout
                div.innerHTML = '';
                div.style.cssText = divReset + 'width:1px;padding:1px;display:inline;zoom:1';
                support.inlineBlockNeedsLayout = (div.offsetWidth === 3);

                // Support: IE6
                // Check if elements with layout shrink-wrap their children
                div.style.display = 'block';
                div.innerHTML = '<div></div>';
                div.firstChild.style.width = '5px';
                support.shrinkWrapBlocks = (div.offsetWidth !== 3);

                if (support.inlineBlockNeedsLayout) {
                    // Prevent IE 6 from affecting layout for positioned elements #11048
                    // Prevent IE from shrinking the body in IE 7 mode #12869
                    // Support: IE<8
                    body.style.zoom = 1;
                }
            }

            body.removeChild(container);

            // Null elements to avoid leaks in IE
            container = div = tds = marginDiv = null;
        });

        // Null elements to avoid leaks in IE
        all = select = fragment = opt = a = input = null;

        return support;
    })();

    // 匹配结尾是否有“{...}”或"[...]"
    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
        // 匹配大写字母
        rmultiDash = /([A-Z])/g;

    /**
     * 内部用来设置/获取元素或对象的缓存方法
     *
     * @param elem DOM元素或者JS对象
     * @param name 缓存的标识符key
     * @param data 缓存数据
     * @param {Boolean} pvt 当为true时表示是私有性的，jq内部使用的
     */

    function internalData(elem, name, data, pvt /* Internal Use Only */ ) {
        // 判断该对象能不能绑定数据
        if (!jQuery.acceptData(elem)) {
            return;
        }

        var thisCache, ret,
            // expando是jQuery生成的随机ID
            internalKey = jQuery.expando,
            getByName = typeof name === 'string',
            // 我们不得不分别处理DOM元素和js对象，
            // 因为ie6/7的垃圾回收不能正确处理对DOM元素的对象引用
            isNode = elem.nodeType,
            // 只有DOM元素才需要全局jQuery.cache对象。
            // js对象数据直接指向该对象，垃圾回收可以自动处理
            cache = isNode ? jQuery.cache : elem,
            // 1. 如果是dom元素，返回dom元素通过expando对应的id（值可能为undefined）
            // 2. 如果是普通js对象，分两种情况：
            //    2.1 如果js对象存在通过expando对应的值，即代表有缓存数据，则立即返回expando作为id
            //    2.2 如果没有对应值，则代表没有缓存数据，此时返回undefined
            // 也就是说如果id不为空，那么肯定是有存储数据过的
            id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;

        // 当一个对象没有data的时候返回，避免多余工作
        if ((!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined) {
            return;
        }

        // 如果没有ID
        if (!id) {
            // 如果是DOM元素，给该节点绑定一个属性ID
            if (isNode) {
                elem[internalKey] = id = core_deletedIds.pop() || jQuery.guid++;
            } else {
                // 否则是对象则通过expando创建一个唯一ID
                id = internalKey;
            }
        }

        // 如果cache对象没有指定id属性
        if (!cache[id]) {
            cache[id] = {};

            // 当为JS对象时，为了避免被JSON.stringify序列化
            // 这里将toJSON方法设为空方法，这样就会返回空值
            if (!isNode) {
                cache[id].toJSON = jQuery.noop;
            }
        }


        // 如果name是对象或函数，当存在pvt将name浅复制给cache[id]，
        // 否则浅复制给cache[id].data
        if (typeof name === 'object' || typeof name === 'function') {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name);
            } else {
                cache[id].data = jQuery.extend(cache[id].data, name);
            }
        }

        thisCache = cache[id];

        // 为了防止系统内部数据和用户自定义数据的key发生冲突，才将用户数据包在thisCache.data中，
        // pvt的意思是保持私有性，非私有性时对外提供data属性对象
        // 系统内部数据就是thisCache中
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {};
            }

            // 只对外开放thisCache.data属性值
            thisCache = thisCache.data;
        }

        // 如果data不为undefined，将data赋值给thisCache的通过驼峰式的name属性
        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data;
        }

        // 如果name是字符串
        if (getByName) {
            // 尝试获取thisCache的属性data
            ret = thisCache[name];

            // 如果ret为null或undefined，则尝试获取驼峰式的name属性data值
            if (ret == null) {
                ret = thisCache[jQuery.camelCase(name)];
            }
        } else {
            // 否则name为非字符串时，ret指向thisCache
            ret = thisCache;
        }

        return ret;
    }

    /**
     * 删除对应的缓存数据
     *
     * @param elem
     * @param name
     * @param pvt
     */

    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }

        var i, l, thisCache,
            isNode = elem.nodeType,
            cache = isNode ? jQuery.cache : elem,
            id = isNode ? elem[jQuery.expando] : jQuery.expando;

        // 如果没有缓存对象，返回
        if (!cache[id]) {
            return;
        }

        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;

            if (thisCache) {
                // 支持单个的key
                // 数组，多个key，如：[key1, key2, key3, ...]
                // 字符串，多个key，用空格隔开，如：'key1 key2 key3 ...'

                // 如果name不是数组类型，将name转换为数组类型
                if (!jQuery.isArray(name)) {
                    // 如果name是thisCache的一个属性key
                    if (name in thisCache) {
                        // 用数组保存
                        name = [name];
                    } else {
                        // 将name驼峰化
                        name = jQuery.camelCase(name);
                        // 此时若name是thisCache的一个属性key
                        if (name in thisCache) {
                            // 同样转换成数组
                            name = [name];
                        } else {
                            // 否则name是个多个空白分隔的字符串
                            name = name.split(' ');
                        }
                    }
                    // 如果是数组，将name数组各项驼峰化后追加到name数组里
                } else {
                    name = name.concat(jQuery.map(name, jQuery.camelCase));
                }

                // 遍历删除name数组里的各项key属性
                for (i = 0, l = name.length; i < l; i++) {
                    delete thisCache[name[i]];
                }

                // 如果pvt为true，检查thisCache是否为空的数据对象，如果不是直接退出函数
                // 如果pvt为false，判断thisCache是否为空对象，如果不是也是退出
                // 这里考虑到用户自定义或者其他私有受保护的属性
                if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
                    return;
                }
            }
        }

        // 如果pvt为false，即非私有性
        // 删除data属性值
        if (!pvt) {
            delete cache[id].data;

            // 同理，这时cache[id]还存在其他属性，退出
            if (!isEmptyDataObject(cache[id])) {
                return;
            }
        }

        // 如果是DOM元素，清除绑定在elem上的所有数据
        if (isNode) {
            jQuery.cleanData([elem], true);
        } else if (jQuery.support.deleteExpando || cache != cache.window) {
            // 如果支持删除绑定在对象上的expando属性或者cache非window对象
            // 只用delete就可以删除了
            delete cache[id];
        } else {
            // 其他情况就将属性设为null来清空缓存
            cache[id] = null;
        }
    }

    jQuery.extend({
        // 当是DOM元素的时候，使用$.cache来缓存数据
        cache: {},
        // 生成expando字符串
        expando: 'jQuery' + (core_version + Math.random()).replace(/\D/g, ''),
        // 以下情况不需要缓存
        noData: {
            'embed': true,
            'object': 'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000',
            'applet': true
        },
        // 判断是否已有缓存数据
        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        // 桥接模式
        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },
        // 私有方法
        _data: function(elem, name, data) {
            return internalData(elem, name, data, true);
        },
        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, true);
        },
        // 判断元素或对象是否可以缓存
        acceptData: function(elem) {
            if (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {
                return false;
            }

            var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];

            return !noData || noData !== true && elem.getAttribute('classid') === noData;
        }
    });

    jQuery.fn.extend({
        data: function(key, value) {
            var attrs, name,
                elem = this[0],
                i = 0,
                data = null;

            // 如果key为undefined，说明key和value都为空，获取缓存data
            if (key === undefined) {
                // 如果有DOM元素
                if (this.length) {
                    // 获取以前保存在elem的data
                    data = jQuery.data(elem);

                    // 对于元素节点而言，数据可以来自两个地方：
                    // 1. jQuery.cache缓存中，之前手动存进去的，如：$dom.data('data1', value1);
                    // 2. 来自html标签的以data-开头的属性，之后该属性的数据也会被存储到jQuery.cache缓存中

                    // 如果元素节点的jQuery.cache['parsedAttrs']的值为null | false | undefined
                    // 说明elem的属性节点没有被解析过，下面就进行解析
                    if (elem.nodeType === 1 && !jQuery._data(elem, 'parsedAttrs')) {
                        // 获得elem的属性列表
                        attrs = elem.attributes;
                        for (; i < attrs.length; i++) {
                            // 该属性名称
                            name = attrs[i].name;

                            // 如果name有"data-"字符
                            if (!name.indexOf('data-')) {
                                // 将name驼峰化："dataCustom"
                                name = jQuery.camelCase(name.slice(5));

                                // 如果没有对应的缓存，就将html5的“data-”值（转换后）设置为相应的缓存值
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        // 给缓存对象添加私有缓存，并把缓存值设置为true
                        // 用来标记已经解析过属性
                        jQuery._data(elem, 'parseAttrs', true);
                    }
                }

                return data;
            }

            // 如果key是对象，直接将其拷贝到jQuery.cache.data缓存对象里
            // 用来设置多个值的情况
            if (typeof key === 'object') {
                return this.each(function() {
                    jQuery.data(this, key);
                });
            }

            // 为每个元素执行函数后返回原始的元素集(this)
            return jQuery.access(this, function(value) {
                if (value === undefined) {
                    // 如果value未定义并且在jQuery.cache缓存中没有找到相应key的缓存，
                    // 然后再试图查看HTML5标签的“data-”属性是否被解析过了
                    return elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;
                }

                // 否则，遍历元素， 给相应元素设置缓存
                this.each(function() {
                    jQuery.data(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });

    // 处理元素节点中使用HTML5的“data-test”属性，并将其转换到相应的类型存储到jQuery.cache对象中

    function dataAttr(elem, key, data) {
        // 如果data为空且elem是元素节点，那么将HTML5的data-属性值转换为相应的类型
        if (data === undefined && elem.nodeType === 1) {
            // 反驼峰化
            var name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();

            // 获取data字符串属性值
            data = elem.getAttribute(name);

            if (typeof data === 'string') {
                try {
                    // 布尔型
                    data = data === 'true' ? true :
                        data === 'false' ? false :
                    // null
                    data === 'null' ? null :
                    // +data只会将数字字符转换成数字,再加上""则会转换回字符串
                    // 这里是测试是否为数字
                    +data + '' === data ? +data :
                    // 数组或对象，并转换
                    rbrace.test(data) ? jQuery.parseJSON(data) :
                    // 其他类型
                    data;
                } catch (e) {}

                // 将格式化的数据存在jQuery.cache缓存。
                jQuery.data(elem, key, data);
            } else {
                // 如果该属性不存在，此时data为null，将其转换为undefined
                data = undefined;
            }
        }

        // 返回data-属性值(转换后)的类型
        return data;
    }

    // 检查缓存对象的数据是否为空

    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            // 如果公共data为空，那么私有对象也为空
            if (name === 'data' && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== 'toJSON') {
                return false;
            }
        }

        return true;
    }

    jQuery.extend({
        // 显示或操作在匹配元素上执行的函数队列
        queue: function(elem, type, data) {
            var queue;

            if (elem) {
                // type没定义的话就默认使用fxqueue
                type = (type || 'fx') + 'queue';
                // 先获取elem上的缓存数据
                queue = jQuery._data(elem, type);

                if (data) {
                    // 如果没有缓存数据或者data是数组
                    // 则给elem设置缓存数据
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        // 否则存在缓存数据数组直接入栈
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        // 从队列最前端移除一个队列函数，并执行它
        dequeue: function(elem, type) {
            type = type || 'fx';

            var
            // 获取缓存队列
            queue = jQuery.queue(elem, type),
                startLength = queue.length,
                // 取得队列的第一个元素
                fn = queue.shift(),
                // 钩子对象，如果获取不到缓存的钩子对象，就设置新的钩子对象并返回
                hooks = jQuery._queueHooks(elem, type),
                // 用来执行下一个队列
                next = function() {
                    jQuery.dequeue(elem, type);
                };

            // 如果第一个元素是"inprogress",取下一个元素，长度相应减1
            if (fn === 'inprogress') {
                fn = queue.shift();
                startLength--;
            }

            // 为钩子对象添加cur方法
            hooks.cur = fn;
            // 如果此时fn不为null || false || undefined
            if (fn) {
                // 如果type为“fx”，给队列添加"inprogress",防止自动出列(dequeue)
                if (type === 'fx') {
                    queue.unshift('inprogress');
                }

                // 删除上一个队列的stop函数
                delete hooks.stop;
                // 执行fn函数，并且把下一个队列函数设置为fn的第一个参数
                /*
                 可以这样使用：
                 $(document.body).queue('test', function(next){
                 console.log(11);
                 next();
                 });
                 $(document.body).queue('test', function(){
                 console.log(22);
                 });
                 $(document.body).dequeue('test');
                 */
                fn.call(elem, next, hooks);
            }

            // 如果队列长度为0且存在钩子对象，则删除缓存
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        // 私有方法，生成一个队列钩子对象（即从缓存数据中获取的队列钩子）
        // 或者设置缓存队列钩子对象，这个对象的empty属性是一个Callbacks对象，这里的作用是删除缓存队列和缓存队列钩子的数据
        _queueHooks: function(elem, type) {
            var key = type + 'queueHooks';
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks('once memory').add(function() {
                    jQuery._removeData(elem, type + 'queue');
                    jQuery._removeData(elem, key);
                })
            });
        }
    });

    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;

            if (typeof type !== 'string') {
                data = type;
                type = 'fx';
                setter--;
            }

            /*
             当满足这个条件的有以下几个情况：
             1.没有参数
             2.参数只有一个，且type是字符串
             */
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }

            // 其他情况
            return data === undefined ?
                this :
                this.each(function() {
                    var queue = jQuery.queue(this, type, data);

                    jQuery._queueHooks(this, type);

                    // 如果是动画队列且第一个元素不是"inprogres",
                    // 就出列并执行下一个元素
                    if (type === 'fx' && queue[0] !== 'inprogress') {
                        jQuery.dequeue(this, type);
                    }
                });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        // TODO
        delay: function(time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || 'fx';

            return this.queue(type, function(next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function() {
                    clearTimeout(timeout);
                };
            });
        },
        clearQueue: function(type) {
            return this.queue(type || 'fx', []);
        },
        promise: function(type, obj) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if (!(--count)) {
                        defer.resolveWith(elements, [elements]);
                    }
                };

            if (typeof type !== 'string') {
                obj = type;
                type = undefined;
            }
            type = type || 'fx';

            while (i--) {
                tmp = jQuery._data(elements[i], type + 'queueHooks');
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });

    var nodeHook, boolHook,
        rclass = /[\t\r\n]/g,
        rreturn = /\r/g,
        rfocusable = /^(?:input|select|textarea|button|object)$/i,
        rclickable = /^(?:a|area)$/i,
        rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
        ruseDefault = /^(?:checked|selected)$/i,
        getSetAttribute = jQuery.support.getSetAttribute,
        getSetInput = jQuery.support.input;

    jQuery.fn.extend({
        attr: function(name, value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        },
        prop: function(name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {}
            });
        },
        addClass: function(value) {
            var classes, elem, cur, clazz, j,
                i = 0,
                len = this.length,
                proceed = typeof value === 'string' && value;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }

            if (proceed) {
                // The disjunction here is for better compressibility (see removeClass)
                classes = (value || '').match(core_rnotwhite) || [];

                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ?
                        (' ' + elem.className + ' ').replace(rclass, ' ') :
                        ' '
                    );

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(' ' + clazz + ' ') < 0) {
                                cur += clazz + ' ';
                            }
                        }
                        elem.className = jQuery.trim(cur);

                    }
                }
            }

            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j,
                i = 0,
                len = this.length,
                proceed = arguments.length === 0 || typeof value === 'string' && value;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || '').match(core_rnotwhite) || [];

                for (; i < len; i++) {
                    elem = this[i];
                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && (elem.className ?
                        (' ' + elem.className + ' ').replace(rclass, ' ') :
                        ''
                    );

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            // Remove *all* instances
                            while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                                cur = cur.replace(' ' + clazz + ' ', ' ');
                            }
                        }
                        elem.className = value ? jQuery.trim(cur) : '';
                    }
                }
            }

            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value,
                isBool = typeof stateVal === 'boolean';

            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }

            return this.each(function() {
                if (type === 'string') {
                    // toggle individual class names
                    var className,
                        i = 0,
                        self = jQuery(this),
                        state = stateVal,
                        classNames = value.match(core_rnotwhite) || [];

                    while ((className = classNames[i++])) {
                        // check each className given, space separated list
                        state = isBool ? state : !self.hasClass(className);
                        self[state ? 'addClass' : 'removeClass'](className);
                    }

                    // Toggle whole class name
                } else if (type === core_strundefined || type === 'boolean') {
                    if (this.className) {
                        // store className if set
                        jQuery._data(this, '__className__', this.className);
                    }

                    // If the element has a class name or if we're passed "false",
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    this.className = this.className || value === false ? '' : jQuery._data(this, '__className__') || '';
                }
            });
        },
        hasClass: function(selector) {
            var className = ' ' + selector + ' ',
                i = 0,
                l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
                    return true;
                }
            }

            return false;
        },
        val: function(value) {
            var ret, hooks, isFunction,
                // 获取伪数组中的第一个元素
                elem = this[0];

            // 如果没有传参，说明是获取value值
            if (!arguments.length) {
                if (elem) {
                    // 尝试获取valHooks钩子对象,
                    // 如果元素不具有type类型的钩子对象，
                    // 则尝试赋值元素标签键值的钩子对象
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

                    // 如果存在钩子对象且有get方法且get返回的不是undefined
                    // 则返回get方法的返回值
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }

                    // 否则没有相应的钩子对象，直接获取元素的value值
                    ret = elem.value;

                    // 如果ret是字符串，返回过滤掉制表符的字符串，
                    // 否则ret为空就返回空字符串，
                    // 否则返回ret
                    return typeof ret === "string" ?
                    // handle most common string cases
                    ret.replace(rreturn, "") :
                        ret == null ? "" : ret;
                }

                return;
            }

            // 下面是有参数的情况，说明是设置value值

            // 先判断value是否为函数
            isFunction = jQuery.isFunction(value);

            // 遍历元素集
            return this.each(function(i) {
                var val,
                    self = jQuery(this);

                if (this.nodeType !== 1) {
                    return;
                }

                // 如果value是函数就执行，然后给ret赋值返回的值
                if (isFunction) {
                    val = value.call(this, i, self.val());
                } else {
                    val = value;
                }

                // 如果value为null或undefined，转化为字符串
                // 如果是数字类型也转换为字符串
                // 如果是数组类型，使用map方法返回一个返回值数组
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }

                // 尝试获取钩子对象
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                // 如果没有钩子对象，或者钩子对象没有set方法，
                // 又或者set方法返回的值是undefined，
                // 就使用正常操作
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });

    jQuery.extend({
        valHooks: {
            option: {
                /*
                 获取option的value值
                 */
                get: function(elem) {
                    // Blackberry 4.7的attributes.value为undefined但可以使用.value获取
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text;
                }
            },
            /* 获取select的value值，如果是多选则返回数组 */
            select: {
                get: function(elem) {
                    var value, option,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === 'select-one' || index < 0,
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ? max :
                            one ? index : 0;

                    // 遍历所有选中的项
                    for (; i < max; i++) {
                        option = options[i];

                        // 旧版本IE不会更新选中项当表单重置后
                        if ((option.selected || i === index) &&
                            // 不返回被禁用的选项或者在被禁用的optgroup中
                            (jQuery.support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) &&
                            (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))
                        ) {
                            // 为option设置指定值
                            value = jQuery(option).val();

                            // 单选的话我们就不需要用数组了
                            if (one) {
                                return value;
                            }

                            // 多选就返回数组
                            values.push(value);
                        }
                    }

                    return values;
                },
                set: function(elem, value) {
                    var values = jQuery.makeArray(value);

                    jQuery(elem).find('option').each(function() {
                        this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                    });

                    if (!values.length) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },
        attr: function(elem, name, value) {
            var hooks, notxml, ret,
                nType = elem.nodeType;

            // 如果elem的类型是文本，注释或者属性直接退出
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            // 当不支持attributes时，回退用prop方法
            if (typeof elem.getAttribute === core_strundefined) {
                return jQuery.prop(elem, name, value);
            }

            // 是否非XML文档
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

            // 如果钩子被定义了则抓取
            if (notxml) {
                name = name.toLowerCase();
                // 如果不存在attrHooks钩子对象就尝试获取boolHook的钩子对象，
                // 否则就用nodeHook这个钩子对象
                hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);
            }

            if (value !== undefined) {
                // value为null就删除attr属性
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                } else if (hooks && notxml && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    // 否则如果存在钩子方法，则返回set方法的返回值
                    return ret;
                } else {
                    // 其他情况就直接用setAttribute设置value
                    elem.setAttribute(name, value + '');
                }
            } else if (hooks && notxml && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                // 如果value是undefined，且存在钩子方法，
                // 返回get方法的返回值
                return ret;
            } else {
                // 其他情况（无钩子对象）就使用getAttribute获取value
                // 在IE9+，Flash对象没有.getAttribute
                if (typeof elem.getAttribute !== core_strundefined) {
                    ret = elem.getAttribute(name);

                    return ret == null ?
                        undefined :
                        ret;
                }
            }
        },
        removeAttr: function(elem, value) {
            var name, propName,
                i = 0,
                // value值可以是空格连接的多个value，
                // 这里通过正则匹配非空字符串，返回匹配的数组
                attrNames = value && value.match(core_rnotwhite);

            // 如果attrNames存在且elem是元素节点
            if (attrNames && elem.nodeType === 1) {
                // 遍历attrNames数组
                while ((name = attrNames[i++])) {
                    // 如果没有propFix对象（将name转换为正确的字符串）就直接使用name作为属性值
                    propName = jQuery.propFix[name] || name;

                    // 布尔值的属性需要特殊处理
                    if (rboolean.test(name)) {
                        // 如果不支持获取和设置属性且有selected或checked属性，
                        // 则将defaultName和propName设置为false
                        if (!getSetAttribute && ruseDefault.test(name)) {
                            elem[jQuery.camelCase('default-' + name)] = elem[propName] = false;
                        } else {
                            // 其他情况直接把propName属性设置为false
                            elem[propName] = false;
                        }
                    } else {
                        // 非布尔值属性就调用jQuery.attr方法
                        jQuery.attr(elem, name, '');
                    }

                    // 删除元素上的该属性
                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!jQuery.support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                        // Setting the type on a radio button after the value resets the value in IE6-9
                        // Reset value to default in case type is set after value during creation
                        var val = elem.value;
                        elem.setAttribute('type', value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        propFix: {
            tabindex: 'tabIndex',
            readonly: 'readOnly',
            'for': 'htmlFor',
            'class': 'className',
            maxlength: 'maxLength',
            cellspacing: 'cellSpacing',
            cellpadding: 'cellPadding',
            rowspan: 'rowSpan',
            colspan: 'colSpan',
            usemap: 'useMap',
            frameborder: 'frameBorder',
            contenteditable: 'contentEditable'
        },
        prop: function(elem, name, value) {
            var ret, hooks, notxml,
                nType = elem.nodeType;

            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

            // 如果elem不是xml文档元素，获取被fixed的name和钩子对象
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }

            // 如果value不是undefined，说明是设置prop
            if (value !== undefined) {
                // 如果有钩子对象且存在set方法，
                // 返回非undefined的方法返回值，
                // 否则正常情况下直接用elem[name]设置prop
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    return (elem[name] = value);
                }

                // 如果value是undefined，说明是获取prop属性值
            } else {
                // 有钩子对象用其get方法，没有就用原生的方法
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                    return ret;
                } else {
                    return elem[name];
                }
            }
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    // 当elem的tabindex没有被明确设置时，不会总返回正确的值
                    var attributeNode = elem.getAttributeNode('tabindex');

                    return attributeNode && attributeNode.specified ?
                        parseInt(attributeNode.value, 10) :
                        rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ?
                        0 :
                        undefined;
                }
            }
        }
    });

    // Hook for boolean attributes
    boolHook = {
        get: function(elem, name) {
            var
            // Use .prop to determine if this attribute is understood as boolean
            prop = jQuery.prop(elem, name),

                // Fetch it accordingly
                attr = typeof prop === "boolean" && elem.getAttribute(name),
                detail = typeof prop === "boolean" ?

                getSetInput && getSetAttribute ?
                    attr != null :
                // oldIE fabricates an empty string for missing boolean attributes
                // and conflates checked/selected into attroperties
                ruseDefault.test(name) ?
                    elem[jQuery.camelCase("default-" + name)] : !! attr :

                // fetch an attribute node for properties not recognized as boolean
                elem.getAttributeNode(name);

            return detail && detail.value !== false ?
                name.toLowerCase() :
                undefined;
        },
        set: function(elem, value, name) {
            if (value === false) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                // IE<8 needs the *property* name
                elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);

                // Use defaultChecked and defaultSelected for oldIE
            } else {
                elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            }

            return name;
        }
    };

    // fix oldIE value attroperty
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                return jQuery.nodeName(elem, "input") ?

                // Ignore the value *property* by using defaultValue
                elem.defaultValue :

                ret && ret.specified ? ret.value : undefined;
            },
            set: function(elem, value, name) {
                if (jQuery.nodeName(elem, "input")) {
                    // Does not return so that setAttribute is also used
                    elem.defaultValue = value;
                } else {
                    // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                    return nodeHook && nodeHook.set(elem, value, name);
                }
            }
        };
    }

    // IE6/7 do not support getting/setting some attributes with get/setAttribute
    if (!getSetAttribute) {

        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                return ret && (name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified) ?
                    ret.value :
                    undefined;
            },
            set: function(elem, value, name) {
                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode(
                        (ret = elem.ownerDocument.createAttribute(name))
                    );
                }

                ret.value = value += "";

                // Break association with cloned elements by also using setAttribute (#9646)
                return name === "value" || value === elem.getAttribute(name) ?
                    value :
                    undefined;
            }
        };

        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            get: nodeHook.get,
            set: function(elem, value, name) {
                nodeHook.set(elem, value === "" ? false : value, name);
            }
        };

        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each(["width", "height"], function(i, name) {
            jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                set: function(elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            });
        });
    }

    // Some attributes require a special call on IE
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if (!jQuery.support.hrefNormalized) {
        jQuery.each(["href", "src", "width", "height"], function(i, name) {
            jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                get: function(elem) {
                    var ret = elem.getAttribute(name, 2);
                    return ret == null ? undefined : ret;
                }
            });
        });

        // href/src property should get the full normalized URL (#10299/#12915)
        jQuery.each(["href", "src"], function(i, name) {
            jQuery.propHooks[name] = {
                get: function(elem) {
                    return elem.getAttribute(name, 4);
                }
            };
        });
    }

    if (!jQuery.support.style) {
        jQuery.attrHooks.style = {
            get: function(elem) {
                // Return undefined in the case of empty string
                // Note: IE uppercases css property names, but if we were to .toLowerCase()
                // .cssText, that would destroy case senstitivity in URL's, like in "background"
                return elem.style.cssText || undefined;
            },
            set: function(elem, value) {
                return (elem.style.cssText = value + "");
            }
        };
    }

    // Safari mis-reports the default selected property of an option
    // Accessing the parent's selectedIndex property fixes it
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
            get: function(elem) {
                var parent = elem.parentNode;

                if (parent) {
                    parent.selectedIndex;

                    // Make sure that it also works with optgroups, see #5701
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        });
    }

    // IE6/7 call enctype encoding
    if (!jQuery.support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }

    // Radios and checkboxes getter/setter
    if (!jQuery.support.checkOn) {
        jQuery.each(["radio", "checkbox"], function() {
            jQuery.valHooks[this] = {
                get: function(elem) {
                    // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
                    return elem.getAttribute("value") === null ? "on" : elem.value;
                }
            };
        });
    }
    jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
                }
            }
        });
    });

    var rformElems = /^(?:input|select|textarea)$/i,
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

    jQuery.event = {
        global: {},
        /**
         * 事件绑定最后都通过jQuery.event.add来实现。其执行过程大致如下：
         1.  先调用jQuery._data从$.cache中取出已有的事件缓存（私有数据，Cache的解析详见数据缓存）
         2.  如果是第一次在DOM元素上绑定该类型事件句柄，在DOM元素上绑定jQuery.event.handle，作为统一的事件响应入口
         3.  将封装后的事件句柄放入缓存中
         传入的事件句柄，会被封装到对象handleObj的handle属性上，此外handleObj还会填充guid、type、namespace、data属性；DOM事件句柄elemData.handle指向jQuery.event.handle，即jQuery在DOM元素上绑定事件时总是绑定同样的DOM事件句柄jQuery.event.handle。
         事件句柄在缓存$.cache中的数据结构如下，事件类型和事件句柄都存储在属性events中，属性handle存放的执行这些事件句柄的DOM事件句柄：
         elemData = {
    events: {
        'click' : [
            { guid: 5, type: 'click', namespace: '', data: undefined,
                handle: { guid: 5, prototype: {} }
            },
            { ... }
        ],
        'keypress' : [ ... ]
    },
    handle: { // DOM事件句柄
        elem: elem,
        prototype: {}
    }
}
         */
        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn,
                special, eventHandle, handleObj,
                handlers, type, namespaces, origType,
                // 创建或获取私有的缓存数据
                elemData = jQuery._data(elem);

            if (!elemData) {
                return;
            }

            // 可以给jq的handler对象传参数配置
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // 确保处理程序有唯一ID，以便查找和删除
            // handler函数添加guid属性
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }

            // 首次初始化元素的事件结构和主要处理程序
            // 缓存数据elemData添加events属性对象
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            // elemData添加handle方法
            if (!(eventHandle = elemData.handle)) {
                // 当我们使用jQuery为元素添加事件处理程序时，
                // 实际上就是调用了这个通过包装的函数，
                // 而这里面就是通过jQuery.event.dispatch方法来触发的
                eventHandle = elemData.handle = function(e) {
                    // 如果jQuery完成初始化且不存在e或者已经jQuery.event.trigger()了
                    // 返回派遣委托后的结果
                    // this指向eventHandle.elem，解决ie中注册事件this指向的问题
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) :
                        undefined;
                };
                // 给handle函数添加elem属性防止IE非原生内存泄露
                // handle方法添加elem属性
                eventHandle.elem = elem;
            }

            // 处理空格分离的多事件
            // jQuery(...).bind("mouseover mouseout", fn);
            types = (types || '').match(core_rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                // 对命名空间进行排序
                // click.a.c.f.d --- a.c.d.f
                namespaces = (tmp[2] || '').split('.').sort();

                // 事件特例(就是为一些事件类型的一些特殊情况的处理)
                special = jQuery.event.special[type] || {};

                // 如果有事件特例，就使用。否则还是使用原始type
                type = (selector ? special.delegateType : special.bindType) || type;

                // 更新事件特例的类型
                special = jQuery.event.special[type] || {};

                // 给handleObj添加事件处理程序相关信息，
                // 如果target对象有相同属性或方法则替换为handleObj的
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join('.')
                }, handleObjIn);

                // 首次初始化事件处理程序队列
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // 当事件特例处理程序没有setup方法或者setup返回false时使用addEventListener/attachEvent
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        // 给元素绑定事件处理程序，知道这里才真正添加事件处理程序
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        } else if (elem.attachEvent) {
                            elem.attachEvent('on' + type, eventHandle);
                        }
                    }
                }

                // 事件特例的一些处理
                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // 添加元素的事件处理列表，
                // 如果有selector，则用来给委托事件使用的
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }

                // 追踪哪个事件曾经被运行过
                jQuery.event.global[type] = true;
            }

            // 防止IE内存泄露
            elem = null;
        },
        // 分离元素的事件或者事件集
        /**
         * 通过jQuery.event.remove实现，其执行过程大致如下：
         1. 现调用jQuery._data从缓存$.cache中取出elem对应的所有数组（内部数据，与调用jQuery.data存储的数据稍有不同
         2. 如果未传入types则移除所有事件句柄，如果types是命名空间，则移除所有与命名空间匹配的事件句柄
         3. 如果是多个事件，则分割后遍历
         4. 如果未指定删除哪个事件句柄，则删除事件类型对应的全部句柄，或者与命名空间匹配的全部句柄
         5. 如果指定了删除某个事件句柄，则删除指定的事件句柄
         6. 所有的事件句柄删除，都直接在事件句柄数组jQuery._data( elem ).events[ type ]上调用splice操作
         7. 最后检查事件句柄数组的长度，如果为0，或为1但要删除，则移除绑定在elem上DOM事件
         8. 最后的最后，如果elem对应的所有事件句柄events都已删除，则从缓存中移走elem的内部数据
         9. 在以上的各个过程，都要检查是否有特例需要处理
         */
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp,
                origCount, t, events,
                special, handlers, type,
                namespaces, origType,
                elemData = jQuery.hasData(elem) && jQuery._data(elem);

            if (!elemData || !(events = elemData.events)) {
                return;
            }

            types = (types || '').match(core_rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();

                // 如果没有指定type，解绑元素的所有事件（包括命名空间上的）
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }

                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                // 该事件列表
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                // 删除匹配的事件

                // 事件列表的长度
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];

                    if ((mappedTypes || origType === handleObj.origType) &&
                        (!handler || handler.guid === handleObj.guid) &&
                        (!tmp || tmp.test(handleObj.namespace)) &&
                        (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        // 删除events事件列表中的该项
                        handlers.splice(j, 1);
                        // 如果有委托，delegateCount就减一
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }

                // 删除通用的事件处理程序，同时避免无限递归

                // 如果原始事件列表有项，经过前面的步骤长度为0
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        // 删除注册的侦听事件
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    // 删除events[type]属性
                    delete events[type];
                }
            }

            // 如果events不再使用则删除
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;

                // 使用removeData检查空的和清空expando
                jQuery._removeData(elem, 'events');
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur,
                bubbleType, special, tmp, i,
                eventPath = [elem || document],
                type = core_hasOwn.call(event, 'type') ? event.type : event,
                namespaces = core_hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];

            cur = tmp = elem = elem || document;

            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }

            // focus/blur变形为focusin/out,确保我们不会立刻触发它们
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }

            if (type.indexOf('.') >= 0) {
                namespaces = type.split('.');
                // 取出第一项，事件类型
                type = namespaces.shift();
                // 命名空间排序
                namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;

            // 确保是jQuery的event对象
            event = event[jQuery.expando] ?
                event :
                new jQuery.Event(type, typeof event === 'object' && event);

            event.isTrigger = true;
            event.namespace = namespaces.join('.');
            event.namespace_re = event.namespace ?
                new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') :
                null;

            // 清除事件，防止被重用
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }

            // 克隆来源数据和预先准备事件，创建处理程序参数列表
            data = data == null ?
                [event] :
                jQuery.makeArray(data, [event]);

            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }

            // 决定事件冒泡优先路径，向上冒到document，然后到window；也可能是全局ownerDocument变量
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    // 如果不是focus/blur类型，将当前元素改为父节点元素
                    cur = cur.parentNode;
                }
                // 一直向上获取父辈元素并存入eventPath数组中
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }

                // 如tmp到了document，我们添加window对象
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }

            // 在事件路径上触发处理程序
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;

                // jQuery 处理程序
                handle = (jQuery._data(cur, 'events') || {})[event.type] && jQuery._data(cur, 'handle');
                // 如果有handle方法，执行它。这里的handle是元素绑定的事件
                if (handle) {
                    handle.apply(cur, data);
                }

                // 原生处理程序
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                    event.preventDefault();
                }
            }
            event.type = type;

            // 如果没有阻止默认行为动作，立刻阻止
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === 'click' && jQuery.nodeName(elem, 'a')) && jQuery.acceptData(elem)) {

                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];

                        // 当我们执行foo()时，不会重新触发onfoo事件
                        if (tmp) {
                            elem[ontype] = null;
                        }

                        // 防止再次触发中的相同事件，第一次触发完后jQuery.event.triggered = undefined
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {
                            // 隐藏元素在focus/blur时，ie9以下会奔溃
                        }
                        jQuery.event.triggered = undefined;

                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },
        // 派遣委托事件
        dispatch: function(event) {
            // 从原生event中创建jq的event
            event = jQuery.event.fix(event);

            var i, ret, handleObj, matched, j,
                handlerQueue = [],
                args = core_slice.call(arguments),
                // 获取元素在jQuery.cache中的events对象的type数组
                handlers = (jQuery._data(this, 'events') || {})[event.type] || [],
                // 事件特例
                special = jQuery.event.special[event.type] || {};

            // 将第一个event参数替换为jq的event
            args[0] = event;
            // 设置委托目标
            event.delegateTarget = this;

            // 如果存在preDispatch钩子，则运行该方法后退出
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }

            // 委托事件队列
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);

            // 先运行委托，如果阻止了冒泡就停止循环
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;

                j = 0;

                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    // 被触发的时间不能有命名空间或者有命名空间，且被绑定的事件是命名空间的一个子集
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        // 尝试通过事件特例触发handle方法，如果没有则触发handleObj的handler方法
                        // mouseenter/mouseleave事件特例就是使用了该handle方法， 
                        // 事件特例的handle方法就是相当于一个装饰者，
                        // 把handleObj.handler包装了起来
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

                        // 如果ret有值且是false则阻止默认行为和冒泡
                        // 即return false的时候阻止默认行为和冒泡
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // 运行postDispatch钩子方法
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }

            return event.result;
        },
        // 处理委托事件的方法，返回一个队列，队列中每个元素有当前元素和匹配到的handler
        handlers: function(event, handlers) {
            var sel, handleObj, matches, i,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                // 当前时间元素
                cur = event.target;

            // 是否有委托
            if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
                // 遍历父辈元素，直到找到委托元素this
                for (; cur != this; cur = cur.parentNode || this) {
                    // 确保是元素且未禁用或者非点击事件
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== 'click')) {
                        matches = [];
                        // 遍历被委托事件处理程序,handlers[i]为jq的handler对象
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];

                            // 当前handler的选择器字符， 加空格字符串是为了防止和Object.prototype属性冲突
                            sel = handleObj.selector + ' ';

                            // matches[sel]保存着当前元素是否在受委托元素中的标记
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ?
                                    jQuery(sel, this).index(cur) >= 0 :
                                    jQuery.find(sel, this, null, [cur]).length;
                            }
                            // 如果当前元素是在受委托元素中，则将当前handlerObj推入到matches数组中
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        // 如果matches数组有内容，则将新对象推入handlerQueue队列中
                        // elem保存着当前元素，handlers这保存着当前元素匹配的handlers
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }

            // 如果handlers还有剩余，把剩余的部分也推入到队列中
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }

            return handlerQueue;
        },
        // 创建一个jq event对象，让其拥有和原始event一样的属性和值
        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }

            var i, prop, copy,
                type = event.type,
                originalEvent = event,
                fixHook = this.fixHooks[type];

            // 如果fixHook不存在判断是鼠标事件还是键盘事件再指向相应的钩子对象
            if (!fixHook) {
                this.fixHooks[type] = fixHook =
                    rmouseEvent.test(type) ? this.mouseHooks :
                    rkeyEvent.test(type) ? this.keyHooks : {};
            }
            // fixHook是否有props属性，该值是一个数组，如果有则添加到jQuery.event.props中
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            // 创建一个jQuery Event实例event，默认行为和冒泡fix
            event = new jQuery.Event(originalEvent);

            // 给jq event添加原始event对象的属性
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }

            // Support: IE<9
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }

            // Support: Chrome 23+, Safari?
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }

            // Support: IE<9
            event.metaKey = !! event.metaKey;

            // 如果钩子对象有filter解决兼容方法，则返回filter后的event
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        // event对象相关属性
        props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
        // 后续要用的
        fixHooks: {},
        // keyEvent钩子
        keyHooks: {
            props: 'char charCode key keyCode'.split(' '),
            filter: function(event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }

                return event;
            }
        },
        /*
         mouseEvent钩子，处理有关鼠标事件的兼容性.
         original为原始event对象，event则为jQuery的event对象
         */
        mouseHooks: {
            props: 'button buttons clientX clientY fromElement offsetX offsetY pageX pageY scrennX screenY toElement'.split(' '),
            filter: function(event, original) {
                var body, eventDoc, doc,
                    button = original.button,
                    fromElement = original.fromElement;

                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;

                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY = (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }

                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }

                // 为点击事件添加which属性， 1 === left；2 === middle； 3 === right
                // 这里没使用button作为属性
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                }

                return event;
            }
        },
        /*
         用来处理各事件里的特殊例子
         */
        special: {
            load: {
                // 阻止image的load事件冒泡到window.load
                noBubble: true
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if (jQuery.nodeName(this, 'input') && this.type === 'checkbox' && this.click) {
                        this.click();
                        return false;
                    }
                }
            },
            focus: {
                trigger: function() {
                    if (this !== document.activeElement && this.focus) {
                        try {
                            this.focus();
                            return false;
                        } catch (e) {}
                    }
                },
                delegateType: 'focusin'
            },
            blur: {
                trigger: function() {
                    if (this === document.activeElement && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: 'focusout'
            },
            beforeunload: {
                postDispatch: function(event) {
                    // Even when returnValue equals to undefined Firefox will still show alert
                    if (event.result !== undefined) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        // 模拟一个event
        simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(),
                event, {
                    type: type,
                    isSimulated: true,
                    originalEvent: {}
                });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };

    // 跨浏览器删除事件
    jQuery.removeEvent = document.removeEventListener ?
        function(elem, type, handle) {
            if (elem.removeEventListener) {
                elem.removeEventListener(type, handle, false);
            }
    } :
        function(elem, type, handle) {
            var name = 'on' + type;

            if (elem.detachEvent) {
                if (typeof elem[name] === core_strundefined) {
                    elem[name] = null;
                }

                elem.detachEvent(name, handle);
            }
    };

    /*
     Event类用来解决阻止默认行为和事件冒泡兼容的类，src为原始event对象，props则是event的一些预配置项
     */
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }

        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            this.isDefaultPrevented = (src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }

        if (props) {
            jQuery.extend(this, props);
        }

        this.timestamp = src && src.timestamp || jQuery.now();

        this[jQuery.expando] = true;
    };

    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,

        preventDefault: function() {
            var e = this.originalEvent;

            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return;
            }

            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;

            this.isPropagationStopped = returnTrue;
            if (!e) {
                return;
            }
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };

    jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout'
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,

            handle: function(event) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                // 确保相关元素是在目标元素的外面，
                // 没有相关元素指的是移到/移出浏览器外
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });

    // IE submit 委托
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function() {
                if (jQuery.nodeName(this, 'form')) {
                    return false;
                }

                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add(this, 'click._submit keypress._submit', function(e) {
                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target,
                        form = jQuery.nodeName(elem, 'input') || jQuery.nodeName(elem, 'button') ? elem.form : undefined;
                    if (form && !jQuery._data(form, 'submitBubbles')) {
                        jQuery.event.add(form, 'submit._submit', function(event) {
                            event._submit_bubble = true;
                        });
                        jQuery._data(form, 'submitBubbles', true);
                    }
                });
                // return undefined since we don't need an event listener
            },
            postDispatch: function(event) {
                // If form was submitted by the user, bubble the event up the tree
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate('submit', this.parentNode, event, true);
                    }
                }
            },
            teardown: function() {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, 'form')) {
                    return false;
                }

                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove(this, '._submit');
            }
        };
    }

    // IE change delegation and checkbox/radio fix
    if (!jQuery.support.changeBubbles) {

        jQuery.event.special.change = {

            setup: function() {

                if (rformElems.test(this.nodeName)) {
                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function(event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function(event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                            }
                            // Allow triggered, simulated change events (#11500)
                            jQuery.event.simulate("change", this, event, true);
                        });
                    }
                    return false;
                }
                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add(this, "beforeactivate._change", function(e) {
                    var elem = e.target;

                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                        jQuery.event.add(elem, "change._change", function(event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true);
                            }
                        });
                        jQuery._data(elem, "changeBubbles", true);
                    }
                });
            },

            handle: function(event) {
                var elem = event.target;

                // Swallow native change events from checkbox/radio, we already triggered them above
                if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },

            teardown: function() {
                jQuery.event.remove(this, "._change");

                return !rformElems.test(this.nodeName);
            }
        };
    }

    // Create "bubbling" focus and blur events
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {

            // Attach a single capturing handler while someone wants focusin/focusout
            var attaches = 0,
                handler = function(event) {
                    jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
                };

            jQuery.event.special[fix] = {
                setup: function() {
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true);
                    }
                },
                teardown: function() {
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true);
                    }
                }
            };
        });
    }

    jQuery.fn.extend({
        on: function(types, selector, data, fn, /*INTERNAL*/ one) {
            var type, origFn;

            // 添加多个事件注册
            if (typeof types === "object") {
                // ( types-Object, selector, data )
                if (typeof selector !== "string") {
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                // 为每个事件迭代
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }

            // 如果data和fn都为空，则将selector赋值给fn，
            if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }

            // 如果只是一次性事件，则将fn从新包装
            if (one === 1) {
                origFn = fn;
                fn = function(event) {
                    // 这里使用空的jq对象来解除事件绑定信息，
                    // 具体定位是通过event.handleObj和目标元素event.delegateTarget
                    jQuery().off(event);
                    // 执行原始的fn函数
                    return origFn.apply(this, arguments);
                };
                // Use same guid so caller can remove using origFn
                // 备忘信息
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            // 统一调用jQuery.event.add方法添加事件处理
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            // 当传递的types是jQuery创建的event对象时
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                    handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            // 当types是对象，遍历递归
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            // 统一调用jQuery.event.remove移除事件处理程序及相关信息
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });

    /*!
     * Sizzle CSS Selector Engine
     * Copyright 2012 jQuery Foundation and other contributors
     * Released under the MIT license
     * http://sizzlejs.com/
     */
    (function(window, undefined) {

        var i,
            cachedruns,
            Expr,
            getText,
            isXML,
            compile,
            hasDuplicate,
            outermostContext,

            // Local document vars
            setDocument,
            document,
            docElem,
            documentIsXML,
            rbuggyQSA,
            rbuggyMatches,
            matches,
            contains,
            sortOrder,

            // Instance-specific data
            expando = "sizzle" + -(new Date()),
            preferredDoc = window.document,
            support = {},
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),

            // General-purpose constants
            strundefined = typeof undefined,
            MAX_NEGATIVE = 1 << 31,

            // Array methods
            arr = [],
            pop = arr.pop,
            push = arr.push,
            slice = arr.slice,
            // Use a stripped-down indexOf if we can't use a native one
            indexOf = arr.indexOf || function(elem) {
                var i = 0,
                    len = this.length;
                for (; i < len; i++) {
                    if (this[i] === elem) {
                        return i;
                    }
                }
                return -1;
            },


            // Regular expressions

            // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
            whitespace = "[\\x20\\t\\r\\n\\f]",
            // http://www.w3.org/TR/css3-syntax/#characters
            characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

            // Loosely modeled on CSS identifier characters
            // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
            // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
            identifier = characterEncoding.replace("w", "w#"),

            // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
            operators = "([*^$|!~]?=)",
            attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
                "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

            // Prefer arguments quoted,
            //   then not containing pseudos/brackets,
            //   then attribute selectors/non-parenthetical expressions,
            //   then anything else
            // These preferences are here to reduce the number of selectors
            //   needing tokenize in the PSEUDO preFilter
            pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)",

            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rcombinators = new RegExp("^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*"),
            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),

            matchExpr = {
                "ID": new RegExp("^#(" + characterEncoding + ")"),
                "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
                "NAME": new RegExp("^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]"),
                "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                "ATTR": new RegExp("^" + attributes),
                "PSEUDO": new RegExp("^" + pseudos),
                "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                    "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                    "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                // For use in libraries implementing .is()
                // We use this for POS matching in `select`
                "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                    whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            },

            rsibling = /[\x20\t\r\n\f]*[+~]/,

            rnative = /^[^{]+\{\s*\[native code/,

            // Easily-parseable/retrievable ID or TAG or CLASS selectors
            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,

            rescape = /'|\\/g,
            rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

            // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
            runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
            funescape = function(_, escaped) {
                var high = "0x" + escaped - 0x10000;
                // NaN means non-codepoint
                return high !== high ?
                    escaped :
                // BMP codepoint
                high < 0 ?
                    String.fromCharCode(high + 0x10000) :
                // Supplemental Plane codepoint (surrogate pair)
                String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
            };

        // Use a stripped-down slice if we can't use a native one
        try {
            slice.call(preferredDoc.documentElement.childNodes, 0)[0].nodeType;
        } catch (e) {
            slice = function(i) {
                var elem,
                    results = [];
                while ((elem = this[i++])) {
                    results.push(elem);
                }
                return results;
            };
        }

        /**
         * For feature detection
         * @param {Function} fn The function to test for native support
         */

        function isNative(fn) {
            return rnative.test(fn + "");
        }

        /**
         * Create key-value caches of limited size
         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
         *    property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *    deleting the oldest entry
         */

        function createCache() {
            var cache,
                keys = [];

            return (cache = function(key, value) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if (keys.push(key += " ") > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                }
                return (cache[key] = value);
            });
        }

        /**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */

        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }

        /**
         * Support testing using an element
         * @param {Function} fn Passed the created div and expects a boolean result
         */

        function assert(fn) {
            var div = document.createElement("div");

            try {
                return fn(div);
            } catch (e) {
                return false;
            } finally {
                // release memory in IE
                div = null;
            }
        }

        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType,
                // QSA vars
                i, groups, old, nid, newContext, newSelector;

            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }

            context = context || document;
            results = results || [];

            if (!selector || typeof selector !== "string") {
                return results;
            }

            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return [];
            }

            if (!documentIsXML && !seed) {

                // Shortcuts
                if ((match = rquickExpr.exec(selector))) {
                    // Speed-up: Sizzle("#ID")
                    if ((m = match[1])) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            // Check parentNode to catch when Blackberry 4.6 returns
                            // nodes that are no longer in the document #6963
                            if (elem && elem.parentNode) {
                                // Handle the case where IE, Opera, and Webkit return items
                                // by name instead of ID
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            // Context is not a document
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) &&
                                contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }

                        // Speed-up: Sizzle("TAG")
                    } else if (match[2]) {
                        push.apply(results, slice.call(context.getElementsByTagName(selector), 0));
                        return results;

                        // Speed-up: Sizzle(".CLASS")
                    } else if ((m = match[3]) && support.getByClassName && context.getElementsByClassName) {
                        push.apply(results, slice.call(context.getElementsByClassName(m), 0));
                        return results;
                    }
                }

                // QSA path
                if (support.qsa && !rbuggyQSA.test(selector)) {
                    old = true;
                    nid = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;

                    // qSA works strangely on Element-rooted queries
                    // We can work around this by specifying an extra ID on the root
                    // and working up from there (Thanks to Andrew Dupont for the technique)
                    // IE 8 doesn't work on object elements
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);

                        if ((old = context.getAttribute("id"))) {
                            nid = old.replace(rescape, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";

                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(",");
                    }

                    if (newSelector) {
                        try {
                            push.apply(results, slice.call(newContext.querySelectorAll(
                                newSelector
                            ), 0));
                            return results;
                        } catch (qsaError) {} finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }

            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }

        /**
         * Detect xml
         * @param {Element|Object} elem An element or a document
         */
        isXML = Sizzle.isXML = function(elem) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };

        /**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */
        setDocument = Sizzle.setDocument = function(node) {
            var doc = node ? node.ownerDocument || node : preferredDoc;

            // If no document and documentElement is available, return
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }

            // Set our document
            document = doc;
            docElem = doc.documentElement;

            // Support tests
            documentIsXML = isXML(doc);

            // Check if getElementsByTagName("*") returns only elements
            support.tagNameNoComments = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });

            // Check if attributes should be retrieved by attribute nodes
            support.attributes = assert(function(div) {
                div.innerHTML = "<select></select>";
                var type = typeof div.lastChild.getAttribute("multiple");
                // IE8 returns a string for some attributes even when not present
                return type !== "boolean" && type !== "string";
            });

            // Check if getElementsByClassName can be trusted
            support.getByClassName = assert(function(div) {
                // Opera can't find a second classname (in 9.6)
                div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
                if (!div.getElementsByClassName || !div.getElementsByClassName("e").length) {
                    return false;
                }

                // Safari 3.2 caches class attributes and doesn't catch changes
                div.lastChild.className = "e";
                return div.getElementsByClassName("e").length === 2;
            });

            // Check if getElementById returns elements by name
            // Check if getElementsByName privileges form controls or returns elements by ID
            support.getByName = assert(function(div) {
                // Inject content
                div.id = expando + 0;
                div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
                docElem.insertBefore(div, docElem.firstChild);

                // Test
                var pass = doc.getElementsByName &&
                // buggy browsers will return fewer than the correct 2
                doc.getElementsByName(expando).length === 2 +
                // buggy browsers will return more than the correct 0
                doc.getElementsByName(expando + 0).length;
                support.getIdNotName = !doc.getElementById(expando);

                // Cleanup
                docElem.removeChild(div);

                return pass;
            });

            // IE6/7 return modified attributes
            Expr.attrHandle = assert(function(div) {
                div.innerHTML = "<a href='#'></a>";
                return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
                    div.firstChild.getAttribute("href") === "#";
            }) ? {} : {
                "href": function(elem) {
                    return elem.getAttribute("href", 2);
                },
                "type": function(elem) {
                    return elem.getAttribute("type");
                }
            };

            // ID find and filter
            if (support.getIdNotName) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== strundefined && !documentIsXML) {
                        var m = context.getElementById(id);
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        return m && m.parentNode ? [m] : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== strundefined && !documentIsXML) {
                        var m = context.getElementById(id);

                        return m ?
                            m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
                            [m] :
                            undefined :
                            [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }

            // Tag
            Expr.find["TAG"] = support.tagNameNoComments ?
                function(tag, context) {
                    if (typeof context.getElementsByTagName !== strundefined) {
                        return context.getElementsByTagName(tag);
                    }
            } :
                function(tag, context) {
                    var elem,
                        tmp = [],
                        i = 0,
                        results = context.getElementsByTagName(tag);

                    // Filter out possible comments
                    if (tag === "*") {
                        while ((elem = results[i++])) {
                            if (elem.nodeType === 1) {
                                tmp.push(elem);
                            }
                        }

                        return tmp;
                    }
                    return results;
            };

            // Name
            Expr.find["NAME"] = support.getByName && function(tag, context) {
                if (typeof context.getElementsByName !== strundefined) {
                    return context.getElementsByName(name);
                }
            };

            // Class
            Expr.find["CLASS"] = support.getByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== strundefined && !documentIsXML) {
                    return context.getElementsByClassName(className);
                }
            };

            // QSA and matchesSelector support

            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];

            // qSa(:focus) reports false when true (Chrome 21),
            // no need to also add to buggyMatches since matches checks buggyQSA
            // A support test would require too much code (would include document ready)
            rbuggyQSA = [":focus"];

            if ((support.qsa = isNative(doc.querySelectorAll))) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function(div) {
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explictly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // http://bugs.jquery.com/ticket/12359
                    div.innerHTML = "<select><option selected=''></option></select>";

                    // IE8 - Some boolean attributes are not treated correctly
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)");
                    }

                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                });

                assert(function(div) {

                    // Opera 10-12/IE8 - ^= $= *= and empty values
                    // Should not select anything
                    div.innerHTML = "<input type='hidden' i=''/>";
                    if (div.querySelectorAll("[i^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\"\"|'')");
                    }

                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }

                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }

            if ((support.matchesSelector = isNative((matches = docElem.matchesSelector ||
                docElem.mozMatchesSelector ||
                docElem.webkitMatchesSelector ||
                docElem.oMatchesSelector ||
                docElem.msMatchesSelector)))) {

                assert(function(div) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    support.disconnectedMatch = matches.call(div, "div");

                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }

            rbuggyQSA = new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = new RegExp(rbuggyMatches.join("|"));

            // Element contains another
            // Purposefully does not implement inclusive descendent
            // As in, an element does not contain itself
            contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
                function(a, b) {
                    var adown = a.nodeType === 9 ? a.documentElement : a,
                        bup = b && b.parentNode;
                    return a === bup || !! (bup && bup.nodeType === 1 && (
                        adown.contains ?
                        adown.contains(bup) :
                        a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
                    ));
            } :
                function(a, b) {
                    if (b) {
                        while ((b = b.parentNode)) {
                            if (b === a) {
                                return true;
                            }
                        }
                    }
                    return false;
            };

            // Document order sorting
            sortOrder = docElem.compareDocumentPosition ?
                function(a, b) {
                    var compare;

                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    }

                    if ((compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b))) {
                        if (compare & 1 || a.parentNode && a.parentNode.nodeType === 11) {
                            if (a === doc || contains(preferredDoc, a)) {
                                return -1;
                            }
                            if (b === doc || contains(preferredDoc, b)) {
                                return 1;
                            }
                            return 0;
                        }
                        return compare & 4 ? -1 : 1;
                    }

                    return a.compareDocumentPosition ? -1 : 1;
            } :
                function(a, b) {
                    var cur,
                        i = 0,
                        aup = a.parentNode,
                        bup = b.parentNode,
                        ap = [a],
                        bp = [b];

                    // Exit early if the nodes are identical
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;

                        // Parentless nodes are either documents or disconnected
                    } else if (!aup || !bup) {
                        return a === doc ? -1 :
                            b === doc ? 1 :
                            aup ? -1 :
                            bup ? 1 :
                            0;

                        // If the nodes are siblings, we can do a quick check
                    } else if (aup === bup) {
                        return siblingCheck(a, b);
                    }

                    // Otherwise we need full lists of their ancestors for comparison
                    cur = a;
                    while ((cur = cur.parentNode)) {
                        ap.unshift(cur);
                    }
                    cur = b;
                    while ((cur = cur.parentNode)) {
                        bp.unshift(cur);
                    }

                    // Walk down the tree looking for a discrepancy
                    while (ap[i] === bp[i]) {
                        i++;
                    }

                    return i ?
                    // Do a sibling check if the nodes have a common ancestor
                    siblingCheck(ap[i], bp[i]) :

                    // Otherwise nodes in our document sort first
                    ap[i] === preferredDoc ? -1 :
                        bp[i] === preferredDoc ? 1 :
                        0;
            };

            // Always assume the presence of duplicates if sort doesn't
            // pass them to our comparison function (as in Google Chrome).
            hasDuplicate = false;
            [0, 0].sort(sortOrder);
            support.detectDuplicates = hasDuplicate;

            return document;
        };

        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };

        Sizzle.matchesSelector = function(elem, expr) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }

            // Make sure that attribute selectors are quoted
            expr = expr.replace(rattributeQuotes, "='$1']");

            // rbuggyQSA always contains :focus, so no need for an existence check
            if (support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr)) {
                try {
                    var ret = matches.call(elem, expr);

                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (ret || support.disconnectedMatch ||
                        // As well, disconnected nodes are said to be in a document
                        // fragment in IE 9
                        elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }

            return Sizzle(expr, document, null, [elem]).length > 0;
        };

        Sizzle.contains = function(context, elem) {
            // Set document vars if needed
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };

        Sizzle.attr = function(elem, name) {
            var val;

            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }

            if (!documentIsXML) {
                name = name.toLowerCase();
            }
            if ((val = Expr.attrHandle[name])) {
                return val(elem);
            }
            if (documentIsXML || support.attributes) {
                return elem.getAttribute(name);
            }
            return ((val = elem.getAttributeNode(name)) || elem.getAttribute(name)) && elem[name] === true ?
                name :
                val && val.specified ? val.value : null;
        };

        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };

        // Document sorting and removing duplicates
        Sizzle.uniqueSort = function(results) {
            var elem,
                duplicates = [],
                i = 1,
                j = 0;

            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            results.sort(sortOrder);

            if (hasDuplicate) {
                for (;
                    (elem = results[i]); i++) {
                    if (elem === results[i - 1]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }

            return results;
        };

        function siblingCheck(a, b) {
            var cur = b && a,
                diff = cur && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

            // Use IE sourceIndex if available on both nodes
            if (diff) {
                return diff;
            }

            // Check if b follows a
            if (cur) {
                while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }

            return a ? 1 : -1;
        }

        // Returns a function to use in pseudos for input types

        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }

        // Returns a function to use in pseudos for buttons

        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }

        // Returns a function to use in pseudos for positionals

        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j,
                        matchIndexes = fn([], seed.length, argument),
                        i = matchIndexes.length;

                    // Match elements found at the specified indexes
                    while (i--) {
                        if (seed[(j = matchIndexes[i])]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }

        /**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */
        getText = Sizzle.getText = function(elem) {
            var node,
                ret = "",
                i = 0,
                nodeType = elem.nodeType;

            if (!nodeType) {
                // If no nodeType, this is expected to be an array
                for (;
                    (node = elem[i]); i++) {
                    // Do not traverse comment nodes
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (see #11153)
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    // Traverse its children
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            // Do not include comment or processing instruction nodes

            return ret;
        };

        Expr = Sizzle.selectors = {

            // Can be adjusted by the user
            cacheLength: 50,

            createPseudo: markFunction,

            match: matchExpr,

            find: {},

            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },

            preFilter: {
                "ATTR": function(match) {
                    match[1] = match[1].replace(runescape, funescape);

                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);

                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }

                    return match.slice(0, 4);
                },

                "CHILD": function(match) {
                    /* matches from matchExpr["CHILD"]
                     1 type (only|nth|...)
                     2 what (child|of-type)
                     3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                     4 xn-component of xn+y argument ([+-]?\d*n|)
                     5 sign of xn-component
                     6 x of xn-component
                     7 sign of y-component
                     8 y of y-component
                     */
                    match[1] = match[1].toLowerCase();

                    if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }

                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +((match[7] + match[8]) || match[3] === "odd");

                        // other types prohibit arguments
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }

                    return match;
                },

                "PSEUDO": function(match) {
                    var excess,
                        unquoted = !match[5] && match[2];

                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }

                    // Accept quoted arguments as-is
                    if (match[4]) {
                        match[2] = match[4];

                        // Strip excess characters from unquoted arguments
                    } else if (unquoted && rpseudo.test(unquoted) &&
                        // Get excess from tokenize (recursively)
                        (excess = tokenize(unquoted, true)) &&
                        // advance to the next closing parenthesis
                        (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }

                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                }
            },

            filter: {

                "TAG": function(nodeName) {
                    if (nodeName === "*") {
                        return function() {
                            return true;
                        };
                    }

                    nodeName = nodeName.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },

                "CLASS": function(className) {
                    var pattern = classCache[className + " "];

                    return pattern ||
                        (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                        classCache(className, function(elem) {
                            return pattern.test(elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "");
                        });
                },

                "ATTR": function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);

                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }

                        result += "";

                        return operator === "=" ? result === check :
                            operator === "!=" ? result !== check :
                            operator === "^=" ? check && result.indexOf(check) === 0 :
                            operator === "*=" ? check && result.indexOf(check) > -1 :
                            operator === "$=" ? check && result.slice(-check.length) === check :
                            operator === "~=" ? (" " + result + " ").indexOf(check) > -1 :
                            operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                            false;
                    };
                },

                "CHILD": function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth",
                        forward = type.slice(-4) !== "last",
                        ofType = what === "of-type";

                    return first === 1 && last === 0 ?

                    // Shortcut for :nth-*(n)

                    function(elem) {
                        return !!elem.parentNode;
                    } :

                    function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start,
                            dir = simple !== forward ? "nextSibling" : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType;

                        if (parent) {

                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while ((node = node[dir])) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }

                            start = [forward ? parent.firstChild : parent.lastChild];

                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                                // Seek `elem` from a previously-cached index
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];

                                while ((node = ++nodeIndex && node && node[dir] ||

                                    // Fallback to seeking `elem` from the start
                                    (diff = nodeIndex = 0) || start.pop())) {

                                    // When found, cache indexes on `parent` and break
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [dirruns, nodeIndex, diff];
                                        break;
                                    }
                                }

                                // Use previously-cached element index if available
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                diff = cache[1];

                                // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                            } else {
                                // Use the same loop as above to seek `elem` from the start
                                while ((node = ++nodeIndex && node && node[dir] ||
                                    (diff = nodeIndex = 0) || start.pop())) {

                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        // Cache the index of each encountered element
                                        if (useCache) {
                                            (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
                                        }

                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }

                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || (diff % first === 0 && diff / first >= 0);
                        }
                    };
                },

                "PSEUDO": function(pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args,
                        fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                            Sizzle.error("unsupported pseudo: " + pseudo);

                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) {
                        return fn(argument);
                    }

                    // But maintain support for old signatures
                    if (fn.length > 1) {
                        args = [pseudo, pseudo, "", argument];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                            markFunction(function(seed, matches) {
                                var idx,
                                    matched = fn(seed, argument),
                                    i = matched.length;
                                while (i--) {
                                    idx = indexOf.call(seed, matched[i]);
                                    seed[idx] = !(matches[idx] = matched[i]);
                                }
                            }) :
                            function(elem) {
                                return fn(elem, 0, args);
                        };
                    }

                    return fn;
                }
            },

            pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function(selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [],
                        results = [],
                        matcher = compile(selector.replace(rtrim, "$1"));

                    return matcher[expando] ?
                        markFunction(function(seed, matches, context, xml) {
                            var elem,
                                unmatched = matcher(seed, null, xml, []),
                                i = seed.length;

                            // Match elements unmatched by `matcher`
                            while (i--) {
                                if ((elem = unmatched[i])) {
                                    seed[i] = !(matches[i] = elem);
                                }
                            }
                        }) :
                        function(elem, context, xml) {
                            input[0] = elem;
                            matcher(input, null, xml, results);
                            return !results.pop();
                    };
                }),

                "has": markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),

                "contains": markFunction(function(text) {
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),

                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function(lang) {
                    // lang value must be a valid identifider
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if ((elemLang = documentIsXML ?
                                elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
                                elem.lang)) {

                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),

                // Miscellaneous
                "target": function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },

                "root": function(elem) {
                    return elem === docElem;
                },

                "focus": function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !! (elem.type || elem.href || ~elem.tabIndex);
                },

                // Boolean properties
                "enabled": function(elem) {
                    return elem.disabled === false;
                },

                "disabled": function(elem) {
                    return elem.disabled === true;
                },

                "checked": function(elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return (nodeName === "input" && !! elem.checked) || (nodeName === "option" && !! elem.selected);
                },

                "selected": function(elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                },

                // Contents
                "empty": function(elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
                    //   not comment, processing instructions, or others
                    // Thanks to Diego Perini for the nodeName shortcut
                    //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {
                            return false;
                        }
                    }
                    return true;
                },

                "parent": function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },

                // Element/input types
                "header": function(elem) {
                    return rheader.test(elem.nodeName);
                },

                "input": function(elem) {
                    return rinputs.test(elem.nodeName);
                },

                "button": function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },

                "text": function(elem) {
                    var attr;
                    // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                    // use getAttribute instead to test this case
                    return elem.nodeName.toLowerCase() === "input" &&
                        elem.type === "text" &&
                        ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type);
                },

                // Position-in-collection
                "first": createPositionalPseudo(function() {
                    return [0];
                }),

                "last": createPositionalPseudo(function(matchIndexes, length) {
                    return [length - 1];
                }),

                "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),

                "even": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "odd": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };

        // Add button/input type pseudos
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }

        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type,
                soFar, groups, preFilters,
                cached = tokenCache[selector + " "];

            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }

            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;

            while (soFar) {

                // Comma and first run
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        // Don't consume trailing commas as valid
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }

                matched = false;

                // Combinators
                if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }

                // Filters
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                        (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }

                if (!matched) {
                    break;
                }
            }

            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ?
                soFar.length :
                soFar ?
                Sizzle.error(selector) :
            // Cache the tokens
            tokenCache(selector, groups).slice(0);
        }

        function toSelector(tokens) {
            var i = 0,
                len = tokens.length,
                selector = "";
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }

        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir,
                checkNonElements = base && dir === "parentNode",
                doneName = done++;

            return combinator.first ?
            // Check against closest ancestor/preceding element

            function(elem, context, xml) {
                while ((elem = elem[dir])) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            } :

            // Check against all ancestor/preceding elements

            function(elem, context, xml) {
                var data, cache, outerCache,
                    dirkey = dirruns + " " + doneName;

                // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                if (xml) {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                if ((data = cache[1]) === true || data === cachedruns) {
                                    return data === true;
                                }
                            } else {
                                cache = outerCache[dir] = [dirkey];
                                cache[1] = matcher(elem, context, xml) || cachedruns;
                                if (cache[1] === true) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
        }

        function elementMatcher(matchers) {
            return matchers.length > 1 ?
                function(elem, context, xml) {
                    var i = matchers.length;
                    while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                            return false;
                        }
                    }
                    return true;
            } :
                matchers[0];
        }

        function condense(unmatched, map, filter, context, xml) {
            var elem,
                newUnmatched = [],
                i = 0,
                len = unmatched.length,
                mapped = map != null;

            for (; i < len; i++) {
                if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }

            return newUnmatched;
        }

        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem,
                    preMap = [],
                    postMap = [],
                    preexisting = results.length,

                    // Get initial elements from seed or context
                    elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                    matcherIn = preFilter && (seed || !selector) ?
                        condense(elems, preMap, preFilter, context, xml) :
                        elems,

                    matcherOut = matcher ?
                    // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                    postFinder || (seed ? preFilter : preexisting || postFilter) ?

                    // ...intermediate processing is necessary
                    [] :

                    // ...otherwise use results directly
                    results :
                        matcherIn;

                // Find primary matches
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }

                // Apply postFilter
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);

                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                        if ((elem = temp[i])) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }

                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i])) {
                                    // Restore matcherIn since elem is not yet a final match
                                    temp.push((matcherIn[i] = elem));
                                }
                            }
                            postFinder(null, (matcherOut = []), temp, xml);
                        }

                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) &&
                                (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {

                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }

                    // Add elements to results, through postFinder if defined
                } else {
                    matcherOut = condense(
                        matcherOut === results ?
                        matcherOut.splice(preexisting, matcherOut.length) :
                        matcherOut
                    );
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }

        function matcherFromTokens(tokens) {
            var checkContext, matcher, j,
                len = tokens.length,
                leadingRelative = Expr.relative[tokens[0].type],
                implicitRelative = leadingRelative || Expr.relative[" "],
                i = leadingRelative ? 1 : 0,

                // The foundational matcher ensures that elements are reachable from top-level context(s)
                matchContext = addCombinator(function(elem) {
                    return elem === checkContext;
                }, implicitRelative, true),
                matchAnyContext = addCombinator(function(elem) {
                    return indexOf.call(checkContext, elem) > -1;
                }, implicitRelative, true),
                matchers = [
                    function(elem, context, xml) {
                        return (!leadingRelative && (xml || context !== outermostContext)) || (
                            (checkContext = context).nodeType ?
                            matchContext(elem, context, xml) :
                            matchAnyContext(elem, context, xml));
                    }
                ];

            for (; i < len; i++) {
                if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                        // Find the next relative operator (if any) for proper handling
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(
                            i > 1 && elementMatcher(matchers),
                            i > 1 && toSelector(tokens.slice(0, i - 1)).replace(rtrim, "$1"),
                            matcher,
                            i < j && matcherFromTokens(tokens.slice(i, j)),
                            j < len && matcherFromTokens((tokens = tokens.slice(j))),
                            j < len && toSelector(tokens)
                        );
                    }
                    matchers.push(matcher);
                }
            }

            return elementMatcher(matchers);
        }

        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            // A counter to specify which element is currently being matched
            var matcherCachedRuns = 0,
                bySet = setMatchers.length > 0,
                byElement = elementMatchers.length > 0,
                superMatcher = function(seed, context, xml, results, expandContext) {
                    var elem, j, matcher,
                        setMatched = [],
                        matchedCount = 0,
                        i = "0",
                        unmatched = seed && [],
                        outermost = expandContext != null,
                        contextBackup = outermostContext,
                        // We must always have either seed elements or context
                        elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context),
                        // Use integer dirruns iff this is the outermost matcher
                        dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

                    if (outermost) {
                        outermostContext = context !== document && context;
                        cachedruns = matcherCachedRuns;
                    }

                    // Add elements passing elementMatchers directly to results
                    // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
                    for (;
                        (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            while ((matcher = elementMatchers[j++])) {
                                if (matcher(elem, context, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                cachedruns = ++matcherCachedRuns;
                            }
                        }

                        // Track unmatched elements for set filters
                        if (bySet) {
                            // They will have gone through all possible matchers
                            if ((elem = !matcher && elem)) {
                                matchedCount--;
                            }

                            // Lengthen the array for every element, matched or not
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }

                    // Apply set filters to unmatched elements
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while ((matcher = setMatchers[j++])) {
                            matcher(unmatched, setMatched, context, xml);
                        }

                        if (seed) {
                            // Reintegrate element matches to eliminate the need for sorting
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }

                            // Discard index placeholder values to get only actual matches
                            setMatched = condense(setMatched);
                        }

                        // Add matches to results
                        push.apply(results, setMatched);

                        // Seedless set matches succeeding multiple successful matchers stipulate sorting
                        if (outermost && !seed && setMatched.length > 0 &&
                            (matchedCount + setMatchers.length) > 1) {

                            Sizzle.uniqueSort(results);
                        }
                    }

                    // Override manipulation of globals by nested matchers
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }

                    return unmatched;
                };

            return bySet ?
                markFunction(superMatcher) :
                superMatcher;
        }

        compile = Sizzle.compile = function(selector, group /* Internal Use Only */ ) {
            var i,
                setMatchers = [],
                elementMatchers = [],
                cached = compilerCache[selector + " "];

            if (!cached) {
                // Generate a function of recursive functions that can be used to check each element
                if (!group) {
                    group = tokenize(selector);
                }
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }

                // Cache the compiled function
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            }
            return cached;
        };

        function multipleContexts(selector, contexts, results) {
            var i = 0,
                len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }

        function select(selector, context, results, seed) {
            var i, tokens, token, type, find,
                match = tokenize(selector);

            if (!seed) {
                // Try to minimize operations if there is only one group
                if (match.length === 1) {

                    // Take a shortcut and set the context if the root selector is an ID
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                        context.nodeType === 9 && !documentIsXML &&
                        Expr.relative[tokens[1].type]) {

                        context = Expr.find["ID"](token.matches[0].replace(runescape, funescape), context)[0];
                        if (!context) {
                            return results;
                        }

                        selector = selector.slice(tokens.shift().value.length);
                    }

                    // Fetch a seed set for right-to-left matching
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];

                        // Abort if we hit a combinator
                        if (Expr.relative[(type = token.type)]) {
                            break;
                        }
                        if ((find = Expr.find[type])) {
                            // Search, expanding context for leading sibling combinators
                            if ((seed = find(
                                token.matches[0].replace(runescape, funescape),
                                rsibling.test(tokens[0].type) && context.parentNode || context
                            ))) {

                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, slice.call(seed, 0));
                                    return results;
                                }

                                break;
                            }
                        }
                    }
                }
            }

            // Compile and execute a filtering function
            // Provide `match` to avoid retokenization if we modified the selector above
            compile(selector, match)(
                seed,
                context,
                documentIsXML,
                results,
                rsibling.test(selector)
            );
            return results;
        }

        // Deprecated
        Expr.pseudos["nth"] = Expr.pseudos["eq"];

        // Easy API for creating new setFilters

        function setFilters() {}

        Expr.filters = setFilters.prototype = Expr.pseudos;
        Expr.setFilters = new setFilters();

        // Initialize with the default document
        setDocument();

        // Override sizzle attribute retrieval
        Sizzle.attr = jQuery.attr;
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;


    })(window);

    var runtil = /Until$/,
        rparentsprev = /^(?:parents|prev(?:Until|All))/,
        isSimple = /^:#\[\.,]*$/,
        rneedsContext = jQuery.expr.match.needsContext,
        // methods guaranteed to produce a unique set when starting from a unique set
        guranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };

    jQuery.fn.extend({
        find: function(selector) {
            var i, ret, self,
                len = this.length;

            if (typeof selector !== 'string') {
                self = this;
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }

            ret = [];
            for (i = 0; i < len; i++) {
                jQuery.find(selector, this[i], ret);
            }

            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = (this.selector ? this.selector + ' ' : '') + selector;
            return ret;
        },
        has: function(target) {
            var i,
                targets = jQuery(target, this),
                len = targets.length;

            return this.filter(function() {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector, false));
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector, true));
        },
        is: function(selector) {
            return !!selector && (
                typeof selector === "string" ?
                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                rneedsContext.test(selector) ?
                jQuery(selector, this.context).index(this[0]) >= 0 :
                jQuery.filter(selector, this).length > 0 :
                this.filter(selector).length > 0);
        },
        closest: function(selectors, context) {
            var cur,
                i = 0,
                l = this.length,
                ret = [],
                pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
                    jQuery(selectors, context || this.context) :
                    0;

            for (; i < l; i++) {
                cur = this[i];

                while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {
                    if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                        ret.push(cur);
                        break;
                    }
                    cur = cur.parentNode;
                }
            }

            return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);
        },
        // Determine the position of an element within
        // the matched set of elements
        index: function(elem) {

            // No argument, return index in parent
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
            }

            // index in selector
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }

            // Locate the position of the desired element
            return jQuery.inArray(
                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem, this);
        },
        add: function(selector, context) {
            var set = typeof selector === "string" ?
                jQuery(selector, context) :
                jQuery.makeArray(selector && selector.nodeType ? [selector] : selector),
                all = jQuery.merge(this.get(), set);

            return this.pushStack(jQuery.unique(all));
        },
        addBack: function(selector) {
            return this.add(selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        }
    });

    jQuery.fn.andSelf = jQuery.fn.addBack;

    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && cur.nodeType !== 1);

        return cur;
    }

    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ?
                elem.contentDocument || elem.contentWindow.document :
                jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);

            if (!runtil.test(name)) {
                selector = until;
            }

            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }

            ret = this.length > 1 && !guranteedUnique[name] ? jQuery.unique(ret) : ret;

            if (this.length > 1 && rparentsprev.test(name)) {
                ret = ret.reverse();
            }

            return this.pushStack(ret);
        };
    });

    jQuery.extend({
        filter: function(expr, elems, not) {
            if (not) {
                expr = ":not(" + expr + ")";
            }

            return elems.length === 1 ?
                jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] :
                jQuery.find.matches(expr, elems);
        },
        dir: function(elem, dir, until) {
            var matched = [],
                cur = elem[dir];

            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function(n, elem) {
            var r = [];

            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }

            return r;
        }
    });

    // Implement the identical functionality for filter and not

    function winnow(elements, qualifier, keep) {

        // Can't pass null or undefined to indexOf in Firefox 4
        // Set to 0 to skip string check
        qualifier = qualifier || 0;

        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                var retVal = !! qualifier.call(elem, i, elem);
                return retVal === keep;
            });

        } else if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return (elem === qualifier) === keep;
            });

        } else if (typeof qualifier === "string") {
            var filtered = jQuery.grep(elements, function(elem) {
                return elem.nodeType === 1;
            });

            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, filtered, !keep);
            } else {
                qualifier = jQuery.filter(qualifier, filtered);
            }
        }

        return jQuery.grep(elements, function(elem) {
            return (jQuery.inArray(elem, qualifier) >= 0) === keep;
        });
    }

    function createSafeFragment(document) {
        var list = nodeNames.split("|"),
            safeFrag = document.createDocumentFragment();

        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(
                    list.pop()
                );
            }
        }
        return safeFrag;
    }

    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
        "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
        rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
        rleadingWhitespace = /^\s+/,
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        rtagName = /<([\w:]+)/,
        rtbody = /<tbody/i,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style|link)/i,
        manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /^$|\/(?:java|ecma)script/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

        // We have to close these tags to support XHTML (#13200)
        wrapMap = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            area: [1, "<map>", "</map>"],
            param: [1, "<object>", "</object>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

            // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
            // unless wrapped in a div with non-breaking characters in front of it.
            _default: jQuery.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
        },
        safeFragment = createSafeFragment(document),
        fragmentDiv = safeFragment.appendChild(document.createElement("div"));

    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

    jQuery.fn.extend({
        text: function(value) {
            return jQuery.access(this, function(value) {
                return value === undefined ?
                    jQuery.text(this) :
                    this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }

            if (this[0]) {
                // The elements to wrap the target around
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }

                wrap.map(function() {
                    var elem = this;

                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }

                    return elem;
                }).append(this);
            }

            return this;
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }

            return this.each(function() {
                var self = jQuery(this),
                    contents = self.contents();

                if (contents.length) {
                    contents.wrapAll(html);

                } else {
                    self.append(html);
                }
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);

            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        },
        append: function() {
            return this.domManip(arguments, true, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    this.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, true, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    this.insertBefore(elem, this.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, false, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function() {
            return this.domManip(arguments, false, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        // keepData is for internal use only--do not document
        remove: function(selector, keepData) {
            var elem,
                i = 0;

            for (;
                (elem = this[i]) != null; i++) {
                if (!selector || jQuery.filter(selector, [elem]).length > 0) {
                    if (!keepData && elem.nodeType === 1) {
                        jQuery.cleanData(getAll(elem));
                    }

                    if (elem.parentNode) {
                        if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                            setGlobalEval(getAll(elem, "script"));
                        }
                        elem.parentNode.removeChild(elem);
                    }
                }
            }

            return this;
        },
        empty: function() {
            var elem,
                i = 0;

            for (;
                (elem = this[i]) != null; i++) {
                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                }

                // Remove any remaining nodes
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }

                // If this is a select, ensure that it displays empty (#12336)
                // Support: IE<9
                if (elem.options && jQuery.nodeName(elem, "select")) {
                    elem.options.length = 0;
                }
            }

            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return jQuery.access(this, function(value) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                if (value === undefined) {
                    return elem.nodeType === 1 ?
                        elem.innerHTML.replace(rinlinejQuery, "") :
                        undefined;
                }

                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                    (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) &&
                    (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                    value = value.replace(rxhtmlTag, "<$1></$2>");

                    try {
                        for (; i < l; i++) {
                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {}
                }

                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function(value) {
            var isFunc = jQuery.isFunction(value);

            // Make sure that the elements are removed from the DOM before they are inserted
            // this can help fix replacing a parent with child elements
            if (!isFunc && typeof value !== "string") {
                value = jQuery(value).not(this).detach();
            }

            return this.domManip([value], true, function(elem) {
                var next = this.nextSibling,
                    parent = this.parentNode;

                if (parent) {
                    jQuery(this).remove();
                    parent.insertBefore(elem, next);
                }
            });
        },
        detach: function(selector) {
            return this.remove(selector, true);
        },
        domManip: function(args, table, callback) {

            // Flatten any nested arrays
            args = core_concat.apply([], args);

            var first, node, hasScripts,
                scripts, doc, fragment,
                i = 0,
                l = this.length,
                set = this,
                iNoClone = l - 1,
                value = args[0],
                isFunction = jQuery.isFunction(value);

            // We can't cloneNode fragments that contain checked, in WebKit
            if (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test(value))) {
                return this.each(function(index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, table ? self.html() : undefined);
                    }
                    self.domManip(args, table, callback);
                });
            }

            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;

                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }

                if (first) {
                    table = table && jQuery.nodeName(first, "tr");
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;

                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    for (; i < l; i++) {
                        node = fragment;

                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);

                            // Keep references to cloned scripts for later restoration
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script"));
                            }
                        }

                        callback.call(
                            table && jQuery.nodeName(this[i], "table") ?
                            findOrAppend(this[i], "tbody") :
                            this[i],
                            node,
                            i
                        );
                    }

                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;

                        // Reenable scripts
                        jQuery.map(scripts, restoreScript);

                        // Evaluate executable scripts on first document insertion
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {

                                if (node.src) {
                                    // Hope ajax is available...
                                    jQuery.ajax({
                                        url: node.src,
                                        type: "GET",
                                        dataType: "script",
                                        async: false,
                                        global: false,
                                        "throws": true
                                    });
                                } else {
                                    jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                                }
                            }
                        }
                    }

                    // Fix #11809: Avoid leaking memory
                    fragment = first = null;
                }
            }

            return this;
        }
    });

    function findOrAppend(elem, tag) {
        return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));
    }

    // Replace/restore the type attribute of script elements for safe DOM manipulation

    function disableScript(elem) {
        var attr = elem.getAttributeNode('type');
        elem.type = (attr && attr.specified) + '/' + elem.type;
        return elem;
    }

    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute('type');
        }
        return elem;
    }

    // Mark scripts as having already been evaluated

    function setGlobalEval(elems, refElements) {
        var elem,
            i = 0;
        for (;
            (elem = elems[i]) != null; i++) {
            jQuery._data(elem, 'globalEval', !refElements || jQuery._data(refElements[i], 'globalEval'));
        }
    }

    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }

        var type, i, l,
            oldData = jQuery._data(src),
            curData = jQuery._data(dest, oldData),
            events = oldData.events;

        if (events) {
            delete curData.handle;
            curData.events = {};

            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                }
            }
        }

        // make the cloned public data object a copy from the original
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }

    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;

        if (dest.nodeType !== 1) {
            return;
        }

        nodeName = dest.nodeName.toLowerCase();

        // IE6-8 copies events bound via attachEvent when using cloneNode.
        if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);

            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle);
            }
        }

        // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
        if (nodeName === 'script' && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);

            // IE6-10 improperly clones children of object elements using classid.
            // IE10 throws NoModificationAllowedError if parent is null, #12132.
        } else if (nodeName === 'object') {
            if (dest.parentNode) {
                dest.outerHTML = src.outerHTML;
            }

            // This path appears unavoidable for IE9. When cloning an object
            // element in IE9, the outerHTML strategy above is not sufficient.
            // If the src has innerHTML and the destination does not,
            // copy the src.innerHTML into the dest.innerHTML. #10324
            if (jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                dest.innerHTML = src.innerHTML;
            }
        } else if (nodeName === 'input' && manipulation_rcheckableType.test(src.type)) {
            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set
            dest.defaultValue = dest.checked = src.checked;

            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if (dest.value !== src.value) {
                dest.value = src.value;
            }

            // IE6-8 fails to return the selected option to the default selected
            // state when cloning options
        } else if (nodeName === 'option') {
            dest.defaultSelected = dest.selected = src.defaultSelected;

            // IE6-8 fails to set the defaultValue to the correct value when
            // cloning other types of input fields
        } else if (nodeName === 'input' || nodeName === 'textarea') {
            dest.defaultVlue = src.defaultValue;
        }
    }

    jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems,
                i = 0,
                ret = [],
                insert = jQuery(selector),
                last = insert.length - 1;

            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);

                core_push.apply(ret, elems.get());
            }

            return this.pushStack(ret);
        };
    });

    function getAll(context, tag) {
        var elems, elem,
            i = 0,
            found = typeof context.getElementsByTagName !== core_strundefined ?
                context.getElementsByTagName(tag || '*') :
                typeof context.querySelectorAll !== core_strundefined ?
                context.querySelectorAll(tag || '*') :
                undefined;

        if (!found) {
            for (found = [], elems = context.childNodes || context;
                (elem = elems[i]) != null; i++) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem);
                } else {
                    jQuery.merge(found, getAll(elem, tag));
                }
            }
        }

        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) :
            found;
    }

    // Used in buildFragment, fixes the defaultChecked property

    function fixDefaultChecked(elem) {
        if (manipulation_rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked;
        }
    }

    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements,
                inPage = jQuery.contains(elem.ownerDocument, elem);

            if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test('<' + elem.nodeName + '>')) {
                clone = elem.cloneNode(true);

                // IE<=8 does not properly clone detached, unknown element nodes
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }

            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);

                // Fix all IE cloning issues
                for (i = 0;
                    (node = srcElements[i]) != null; ++i) {
                    // Ensure that the destination node is not null; Fixes #9587
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i]);
                    }
                }
            }

            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0;
                        (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }

            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }

            destElements = srcElements = node = null;

            // Return the cloned set
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            var j, elem, contains,
                tmp, tag, tbody, wrap,
                l = elems.length,
                safe = createSafeFragment(context),
                nodes = [],
                i = 0;

            for (; i < l; i++) {
                elem = elems[i];

                if (elem || elem === 0) {
                    // Add nodes directly
                    if (jQuery.type(elem) === 'object') {
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                        // Convert non-html into a text node
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));

                        // Convert html into DOM nodes
                    } else {
                        tmp = tmp || safe.appendChild(context.createElement('div'));

                        // Deserialize a standard representation
                        tag = (rtagName.exec(elem) || ['', ''])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;

                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];

                        // Descend through wrappers to the right content
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }

                        // Manually add leading whitespace removed by IE
                        if (!jQuery.support.tbody) {
                            // String was a <table>, *may* have spurious <tbody>
                            elem = tag === 'table' && !rtbody.test(elem) ? tmp : 0;

                            j = elem && elem.childNodes.length;
                            while (j--) {
                                if (jQuery.nodeName((tbody = elem.childNodes[j]), 'tbody') && !tbody.childNodes.length) {
                                    elem.removeChild(tbody);
                                }
                            }
                        }

                        jQuery.merge(nodes.tmp.childNodes);

                        // Fix #12392 for WebKit and IE > 9
                        tmp.textContent = '';

                        // Fix #12392 for oldIE
                        while (tmp.firstChild) {
                            tmp.removeChild(tmp.firstChild);
                        }

                        // Remember the top-level container for proper cleanup
                        tmp = safe.lastChild;
                    }
                }
            }

            // Fix #11356: Clear elements from fragment
            if (tmp) {
                safe.removeChild(tmp);
            }

            // Reset defaultChecked for any radios and checkboxes
            // about to be appended to the DOM in IE 6/7 (#8060)
            if (!jQuery.support.appendChecked) {
                jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            }

            i = 0;
            while ((elem = nodes[i++])) {
                // #4087 - If origin and destination elements are the same, and this is
                // that element, do not do anything
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }

                contains = jQuery.contains(elem.ownerDocument, elem);

                // Append to fragment
                tmp = getAll(safe.appendChild(elem), "script");

                // Preserve script evaluation history
                if (contains) {
                    setGlobalEval(tmp);
                }

                // Capture executables
                if (scripts) {
                    j = 0;
                    while ((elem = tmp[j++])) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }

            tmp = null;

            return safe;
        },
        cleanData: function(elems, /* internal */ acceptData) {
            var elem, type, id, data,
                i = 0,
                internalKey = jQuery.expando,
                cache = jQuery.cache,
                deleteExpando = jQuery.support.deleteExpando,
                special = jQuery.event.special;

            for (;
                (elem = elems[i]) != null; i++) {
                if (acceptData || jQuery.acceptData(elem)) {
                    id = elem[internalKey];
                    data = id && cache[id];

                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);

                                    // Thisis\\ is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }

                        // Remove cache only if it was not already removed by jQuery.event.remove
                        if (cache[id]) {
                            delete cache[id];

                            // IE does not allow us to delete expando properties from nodes,
                            // nor does it have a removeAttribute function on Document nodes;
                            // we must handle all of these cases
                            if (deleteExpando) {
                                delete elem[internalKey];
                            } else if (typeof elem.removeAttribute !== core_strundefined) {
                                elem.removeAttribute(internalKey);
                            } else {
                                elem[internalKey] = null;
                            }

                            core_deletedIds.push(id);
                        }
                    }
                }
            }
        }
    });

    var iframe, getStyles, curCSS,
        ralpha = /alpha\([^)]+\)/i,
        ropacity = /opacity\s*=\s*([^)]*)/,
        rposition = /^(top|right|bottom|left)$/,
        // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
        // see here for display values: https://developer.mozilla.org/en-US/docs/CSS
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rmargin = /^margin/,
        rnumsplit = new RegExp('^(' + core_pnum + ")(.*)$", 'i'),
        rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i'),
        rrelNum = new RegExp('^([+-])=(' + core_pnum + ')', 'i'),
        elemdisplay = {
            BODY: 'block'
        },

        cssShow = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
        },
        cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        },
        cssExpand = ['Top', 'Right', 'Bottom', 'Left'],
        cssPrefixes = ['Webkit', 'O', 'Moz', 'ms'];

    // return a css property mapped to a potentially vendor prefixed property
    // 处理前缀问题

    function vendorPropName(style, name) {
        // shortcut for names that are not vendor prefixed
        if (name in style) {
            return name;
        }

        // check for vendor prefixed names
        var capName = name.charAt(0).toUpperCase() + name.slice(1),
            origName = name,
            l = cssPrefixes.length;

        while (l--) {
            name = cssPrefixes[l] + capName;
            if (name in style) {
                return name;
            }
        }

        return origName;
    }

    // 判断元素是否处于隐藏状态

    function isHidden(elem, el) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
    }

    // 显示或者隐藏元素多个元素

    function showHide(elements, show) {
        var display, elem, hidden,
            values = [],
            index = 0,
            length = elements.length;

        for (; index < length; index++) {
            elem = elements[index];
            // 如果元素没有style属性，跳到下个循环
            if (!elem.style) {
                continue;
            }

            // 从缓存对象中获取elem的olddisplay的值，然后存放在values数组中
            values[index] = jQuery._data(elem, 'olddisplay');
            display = elem.style.display;
            // 如果要显示元素
            if (show) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                // 如果没有缓存且该元素是处于隐藏状态，则显示
                if (!values[index] && display === 'none') {
                    elem.style.display = '';
                }

                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                // 如果元素的display是显示状态，但实际是隐藏的，
                // 说明该元素是继承的隐藏状态
                // 然后设置elem的缓存数据
                if (elem.style.display === '' && isHidden(elem)) {
                    // TODO
                    values[index] = jQuery._data(elem, 'olddisplay', css_defaultDisplay(elem.nodeName));
                }
            } else {
                // 隐藏元素

                if (!values[index]) {
                    // 判断该元素是否处于隐藏状态
                    hidden = isHidden(elem);

                    // 如果非隐藏，就设置elem的缓存属性olddisplay的值
                    if (display && display !== 'none' || !hidden) {
                        // TODO
                        jQuery._data(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
                    }
                }
            }
        }

        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        // 第二次循环设置元素的display状态，防止回流
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === 'none' || elem.style.display === '') {
                elem.style.display = show ? values[index] || '' : 'none';
            }

            return elements;
        }
    }

    jQuery.fn.extend({
        css: function(name, value) {
            return jQuery.access(this, function(elem, name, value) {
                var len, styles,
                    map = {},
                    i = 0;

                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                }

                return value !== undefined ?
                    jQuery.style(elem, name, value) :
                    jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            var bool = typeof state === 'boolean';

            return this.each(function() {
                if (bool ? state : isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });

    jQuery.extend({
        // css钩子对象，获取或设置兼容性问题的css属性值
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, 'opacity');
                        return ret === '' ? '1' : ret;
                    }
                }
            }
        },
        // 以下的css属性不添加px单位
        cssNumber: {
            'columnCount': true,
            'fillOpacity': true,
            'fontWeight': true,
            'lineHeight': true,
            'opacity': true,
            'orphans': true,
            'widows': true,
            'zIndex': true,
            'zoom': true
        },
        // 添加期望使用的css属性字段
        cssProps: {
            'float': jQuery.support.cssFloat ? 'cssFloat' : 'styleFloat'
        },
        // 获取或设置DOM元素样式属性
        style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }

            var ret, type, hooks,
                // 经过驼峰化的name
                origName = jQuery.camelCase(name),
                style = elem.style;

            // 确保样式名称属性name的正确性
            // 预先使用cssProps对象的属性值，如果没有属性值，则添加该(或被处理过)属性
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            if (value !== undefined) {
                type = typeof value;

                // 将相关的数字字符串(+= or -=)转换为数字
                if (type === 'string' && (ret = rrelNum.exec(value))) {
                    // ret数组中的值为字符串类型，这里会进行弱类型转换
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = 'number';
                }

                if (value == null || type === 'number' && isNaN(value)) {
                    return;
                }

                // 会给需要增加px的css值添加px
                if (type === 'number' && !jQuery.cssNumber[origName]) {
                    value += 'px';
                }

                // 更好的做法是使用cssHooks钩子对象，但是却会增加对应的函数，因此没使用
                if (!jQuery.support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
                    style[name] = 'inherit';
                }

                // 如果有钩子对象，则使用狗子对象的值，否则就使用原生特性
                if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    try {
                        style[name] = value;
                    } catch (e) {}
                }
            } else {
                // 如果没有value值，说明只是要获取样式值

                // 钩子里的样式值
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }

                // 否则返回style对象的值
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var num, val, hooks,
                origName = jQuery.camelCase(name);

            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // 使用钩子对象的get方法获取样式值
            if (hooks && 'get' in hooks) {
                val = hooks.get(elem, true, extra);
            }

            // 否则用计算样式的方法
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }

            // 将normal转换为计算的值
            if (val === 'normal' && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }

            if (extra === '' || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        },
        // 为elem应用options设置的样式，当执行callback函数后，
        // 恢复elem原来的样式
        swap: function(elem, options, callback, args) {
            var ret, name,
                old = {};

            for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
            }

            ret = callback.apply(elem, args || []);

            for (name in options) {
                elem.style[name] = old[name];
            }

            return ret;
        }
    });

    // 为兼容性声明不同getStyle和curCSS函数内容
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return window.getComputedStyle(elem, null);
        };

        curCSS = function(elem, name, _computed) {
            var width, minWidth, maxWidth,
                computed = _computed || getStyles(elem),
                // 在ie9中，在使用.css('filter')用getPropertyValue获取
                ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined,
                style = elem.style;

            if (computed) {
                if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name);
                }

                // A tribute to the "awesome hack by Dean Edwards"
                // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
                // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
                // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;

                    style.minWdth = style.maxWidth = style.width = ret;
                    ret = computed.width;

                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }

            return ret;
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };

        curCSS = function(elem, name, _computed) {
            var left, rs, rsLeft,
                computed = _computed || getStyles(elem),
                ret = computed ? computed[name] : undefined,
                style = elem.style;

            // Avoid setting ret to empty string here
            // so we don't default to auto
            if (ret == null && style && style[name]) {
                ret = style[name];
            }

            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            // but not position css attributes, as those are proportional to the parent element instead
            // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                // Remember the original values
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;

                // Put in the new values to get a computed value out
                if (rsLeft) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === 'fontSize' ? '1em' : ret;
                ret = style.pixelLeft + 'px';

                // Revert the changed values
                style.left = left;
                if (rsLeft) {
                    rs.left = rsLeft;
                }
            }

            return ret === '' ? 'auto' : ret;
        };
    }

    // 返回一个相对数值，可带单位

    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ?
        // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") :
            value;
    }

    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ?
        // If we already have the right measurement, avoid augmentation
        4 :
        // Otherwise initialize for horizontal or vertical properties
        name === "width" ? 1 : 0,

            val = 0;

        for (; i < 4; i += 2) {
            // both box models exclude margin, so add it if we want it
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }

            if (isBorderBox) {
                // border-box includes padding, so remove it if we want content
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }

                // at this point, extra isn't border nor margin, so remove border
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                // at this point, extra isn't content, so add padding
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                // at this point, extra isn't content nor padding, so add border
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }

        return val;
    }

    function getWidthOrHeight(elem, name, extra) {

        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles(elem),
            isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";

        // some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }

            // Computed unit is not pixels. Stop here and return.
            if (rnumnonpx.test(val)) {
                return val;
            }

            // we need the check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);

            // Normalize "", auto, and prepare for extra
            val = parseFloat(val) || 0;
        }

        // use the active box-sizing model to add/subtract irrelevant styles
        return (val +
            augmentWidthOrHeight(
                elem,
                name,
                extra || (isBorderBox ? "border" : "content"),
                valueIsBorderBox,
                styles
            )
        ) + "px";
    }

    // Try to determine the default display value of an element
    // 返回元素默认的显示样式值

    function css_defaultDisplay(nodeName) {
        var doc = document,
            display = elemdisplay[nodeName];

        if (!display) {
            display = actualDisplay(nodeName, doc);

            // If the simple way fails, read from inside an iframe
            if (display === 'none' || !display) {
                // Use the already-created iframe if possible
                iframe = (iframe || jQuery('<iframe frameborder="0" width="0" height="0" />')
                    .css('cssText', 'display:block !important'))
                    .appendTo(doc.documentElement);

                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write('<!doctyoe html><html><body>');
                doc.close();

                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }

            // Store the correct default display
            elemdisplay[nodeName] = display;
        }

        return display;
    }

    // Called ONLY from within css_defaultDisplay
    // 元素被插入到DOM树时的display样式值，
    // 该函数只会在css_defaultDisplay函数中使用

    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
            display = jQuery.css(elem[0], 'display');
        elem.remove();
        return display;
    }

    jQuery.each(['height', 'width'], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {
                    // certain elements can have dimension info if we invisibly show them
                    // however, it must have a current display style that would benefit from this
                    return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, 'display')) ?
                        jQuery.swap(elem, cssShow, function() {
                            return getWidthOrHeight(elem, name, extra);
                        }) :
                        getWidthOrHeight(elem, name, extra);
                }
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(
                    elem,
                    name,
                    extra,
                    jQuery.support.boxSizing && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box',
                    styles
                ) : 0);
            }
        };
    });

    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function(elem, computed) {
                // IE uses filters for opacity
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
                    (0.01 * parseFloat(RegExp.$1)) + "" :
                    computed ? "1" : "";
            },
            set: function(elem, value) {
                var style = elem.style,
                    currentStyle = elem.currentStyle,
                    opacity = jQuery.isNumeric(value) ? 'alpha(opacity=' + value * 100 + ")" : '',
                    filter = currentStyle && currentStyle.filter || style.filter || '';

                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;

                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                if ((value >= 1 || value === '') && jQuery.trim(filter.replace(ralpha, '')) === '' && style.removeAttribute) {

                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute('filter');

                    // if there is no filter style applied in a css rule or unset inline opacity, we are done
                    if (value === '' || currentStyle && !currentStyle.filter) {
                        return;
                    }
                }

                // otherwise, set new filter values
                style.filter = ralpha.test(filter) ?
                    filter.replace(ralpha, opacity) :
                    filter + ' ' + opacity;
            }
        };
    }

    // These hooks cannot be added until DOM ready because the support test
    // for it is not run until after DOM ready
    jQuery(function() {
        if (!jQuery.support.reliableMarginRight) {
            jQuery.cssHooks.marginRight = {
                get: function(elem, computed) {
                    if (computed) {
                        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                        // Work around by temporarily setting element display to inline-block
                        return jQuery.swap(elem, {
                            'display': 'inline-block'
                        }, curCSS, [elem, 'marginRight']);
                    }
                }
            };
        }

        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
        // getComputedStyle returns percent when specified for top/left/bottom/right
        // rather than make the css module depend on the offset module, we just check for it here
        if (!jQuery.support.pixelPosition && jQuery.fn.position) {
            jQuery.each(['top', 'left'], function(i, prop) {
                jQuery.cssHooks[prop] = {
                    get: function(elem, computed) {
                        if (computed) {
                            computed = curCSS(elem, prop);
                            // if curCSS returns percentage, fallback to offset
                            return rnumnonpx.test(computed) ?
                                jQuery(elem).position()[prop] + 'px' :
                                computed;
                        }
                    }
                };
            });
        }

    });

    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function(elem) {
            // Support: Opera <= 12.12
            // Opera reports offsetWidths and offsetHeights less than zero on some elements
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css(elem, 'display') === 'none'));
        };

        jQuery.expr.filters.visible = function(elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }

    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0,
                    expanded = {},

                    // assumes a single number if not a string
                    parts = typeof value === 'string' ? value.split(' ') : [value];

                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }

                return expanded;
            }
        };

        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });

    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {

        // Handle event binding
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });

    jQuery.fn.hover = function(fnOver, fnOut) {
        return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    };

    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                // Can add propHook for "elements" to filter or add form elements
                // 可以添加propHook属性钩子对象“elements”来过滤或者添加表单元素
                var elements = jQuery.prop(this, 'elements');
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                // Use .is(":disabled") so that fieldset[disabled] works
                // 过滤掉非表单元素和可提交表单的元素
                return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();

                // 将数组或类数组中的元素转换为{name:xx,value:yy}
                // 格式，如果数组中的值是数组也将后者转换成那种格式
                return val == null ? null : jQuery.isArray(val) ?
                    jQuery.map(val, function(val) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, '\r\n')
                        };
                    }) : {
                        name: elem.name,
                        value: val.replace(rCRLF, '\r\n')
                };
            }).get(); // 转换为纯数组
        }
    });

    //Serialize an array of form elements or a set of
    //key/values into a query string
    // 将数组形式的表单元素或者哈希表序列化成字符串
    jQuery.param = function(a, traditional) {
        var prefix, s = [],
            add = function(key, value) {
                // If value is a function, invoke it and return its value
                // 如果value是函数就执行并返回执行结果
                value = jQuery.isFunction(value) ? value() : (value == null ? '' : value);
                s[s.length] = encodeURIComponent(key) + '=' +
                    encodeURIComponent(value);
            };

        // Set traditional to true for jQuery <= 1.3.2 behavior
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }

        // If an array was passed in, assume that it is an array of form elements.
        // 如果传进来的是数组，假设是表单元素
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
            // 序列化表单元素
            jQuery.each(a, function() {
                add(this.name, this.value);
            });

        } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }

        // Return the resulting serialization
        return s.join('&').replace(r20, '+');
    };

    function buildParams(prefix, obj, traditional, add) {
        var name;

        if (jQuery.isArray(obj)) {
            // Serialize array item.
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);

                } else {
                    // Item is non-scalar (array or object), encode its numeric index
                    buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
                }
            });

        } else if (!traditional && jQuery.type(obj) === 'object') {
            // Serialize object item
            for (name in obj) {
                buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
            }

        } else {
            // Serialize scalar item
            add(prefix, obj);
        }
    }

    

    var
    // Document location
    ajaxLocParts,
        ajaxLocation,
        ajax_nonce = jQuery.now(),

        // 匹配“？”
        ajax_rquery = /\?/,
        // 匹配hash，“#”开头的字符串
        rhash = /#.*$/,
        // 匹配“_=”开头到“&”结尾的字符串
        rts = /([?&])_=[^&]*/,
        // 匹配头部信息，获取headerName，和headerValue
        rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
        // IE leaves an \r character at EOL
        // #7653, #8125, #8152: local protocol detection
        // 匹配协议， 可以判断是否为本地协议
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        // 匹配请求是否有内容
        rnoContent = /^(?:GET|HEAD)$/,
        // 匹配“//”开头的字符
        rprotocol = /^\/\//,
        // 匹配url，例如匹配http://www.baidu.com:8080
        // 将会获取"http:", "www.baidu.com", "8080"
        rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

        // Keep a copy of the old load method
        // jQuery.fn.load旧版本的方法的拷贝
        _load = jQuery.fn.load,

        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        // 前置过滤器
        prefilters = {},

        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        // 请求分发器
        transports = {},

        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        // "*/*"
        allTypes = "*/".concat("*");

    // #8138， IE may throw an exception when accessing
    // a field from window.location if document.domain has been set
    // 在IE中，如果document.domain被设置了，获取window.location会报错
    try {
        ajaxLocation = location.href;
    } catch (e) {
        // Use the href attribute of an A element
        // since IE will modify it given document.location
        // 因为IE会修改A标签元素的href属性，添加window.location字符串
        ajaxLocation = document.createElement('a');
        ajaxLocation.href = '';
        ajaxLocation = ajaxLocation.href;
    }

    // Segment location into parts
    // [URL， http, host, port]
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    // 返回一个函数，为prefilters或者transport添加属性,
    // 该属性值是一个数组，里面存放的是函数func，
    // 可以给dataTypeExpression字符串添加标识，表示是添加到数组头部还是尾部

    function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {
            // 如果dataTypeExpression不是字符串，将它赋值给func
            // 然后把"*"赋值给dataTypeExpression
            if (typeof dataTypeExpression !== 'string') {
                func = dataTypeExpression;
                dataTypeExpression = '*';
            }

            var dataType, i = 0,
                // 返回空格分隔的dataTypeExpression数组
                dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];

            if (jQuery.isFunction(func)) {
                // For each detaType in the dataTypeExpression
                // 遍历dataTypes数组
                while ((dataType = dataTypes[i++])) {
                    // Prepend if requested
                    // 如果第一个字符是“+”，截取“+”后面的字符串或者
                    // 默认为“*”，即匹配所有，
                    // 给structure的属性dataType数组头部添加func
                    if (dataType[0] === '+') {
                        dataType = dataType.slice(1) || '*';
                        (structure[dataType] = structure[dataType] || []).unshift(func);

                        // Otherwise append
                        // 否则第一个字符不是“*”就给structure的属性dataType数组
                        // 尾部添加func
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }

    // Base inspection function for prefilters and transports

    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

        var inspected = {},
            seekingTransport = (structure === transports);

        // 遍历structure[dataType]数组，并执行回调，
        // prefilterOrFactory为函数数组元素，
        // 执行该函数如果返回的结果dataTypeOrTransport是字符串且时prefilters且没有被inspected过，
        // 就给options.dataTypes数组头部添加该字符串，
        // 继续递归dataTypeOrTransport(当我们使用json/jsonp的时候会返回“script”，于是会执行“script”相关的回调)。
        // 如果是transport就返回dataTypeOrTransport的假结果

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    // 如果是查找transport，selected是一个对象，
                    // !selected返回的是false，表示退出each循环
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }

    // A special extend for ajax options
    // that takes "flats" options (not to be deep extended)
    // 对ajax配置项进行扩展
    // 如果jQuery.ajaxSettings.flatOptions存在src对应的key值，
    // 就直接给target添加（覆盖）相应key/value，
    // flatOptions对象里的属性是不需要被深度拷贝的
    // 否则创建一个deep对象，将src的key/value添加给deep，
    // 然后深度克隆deep对象到target.
    // 最后都返回target

    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
            if (src[key] !== undefined) {
                // 如果jQuery.ajaxSettings.flatOptions存在src对应的key值，
                // 就直接给target添加（覆盖）相应key/value，
                // 否则创建一个deep对象，将src的key/value添加给deep
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        // 深度克隆deep对象到target
        if (deep) {
            jQuery.extend(true, target, deep);
        }

        return target;
    }

    jQuery.fn.load = function(url, params, callback) {
        // 早期版本的jQuery.fn.load的接口
        if (typeof url !== 'string' && _load) {
            return _load.apply(this, arguments);
        }

        var selector, response, type, self = this,
            off = url.indexOf(' ');

        // 如果url有空格，空格前面是url，后面是选择器selector
        if (off >= 0) {
            selector = url.slice(off, url.length);
            url = url.slice(0, off);
        }

        // If it's a function
        // load(url, function(){})
        if (jQuery.isFunction(params)) {

            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
            // 否则如果param是对象，则把ajax类型type设置为“POST”，
            // 说明是发送数据到服务器
        } else if (params && typeof params === 'object') {
            type = 'POST';
        }

        // If we have elements to modify, make the request
        // 必须要有元素集
        if (self.length) {
            // 调用底层ajax方法， 其中用了Deferred对象
            jQuery.ajax({
                url: url,

                // If "type" variable is undefined, then "GET" method will be used
                type: type,
                dataType: 'html',
                data: params
            }).done(function(responseText) {
                // 请求成功后
                // Save response for use in complete callback
                response = arguments;

                self.html(selector ?

                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    // 如果有选择器，则创建一个div节点，
                    // 将返回的数据解析成HTML，然后在该HTML下找到选择器匹配的部分，
                    // 填充到div中
                    jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) :

                    // Otherwise use the full result
                    // 否则直接填充
                    responseText);

            }).complete(callback && function(jqXHR, status) {
                // 请求完成后
                // 遍历每个DOM元素，执行callback， 第二个参数是callback的参数
                self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
            });
        }

        return this;
    };

    // Attach a bunch of functions for handling common AJAX events
    // 添加一些AJAX事件方法，这里用的是观察者模式，
    // jQuery.fn.on方法订阅事件，
    // jQuery.fn.trigger方法则可以发布事件
    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });

    // 添加jQuery.get和jQuery.post方法, 区别在于ajax的类型是get还是post
    jQuery.each(['get', 'post'], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            // shift arguments if data argument was omitted
            if (jQuery.jsFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });

    jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        // 上一次被修改的头部的缓存信息
        lastModified: {},
        etag: {},
        // ajax配置项
        ajaxSettings: {
            // 个用来包含发送请求的URL字符串。
            url: ajaxLocation,
            /**
             * (默认: "GET") 请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。
             * @type {String}
             */
            type: "GET",
            /**
             * 是否为本地
             * 默认: 取决于当前的位置协议
             * 允许当前环境被认定为“本地”，（如文件系统），即使jQuery默认情况下不会承认它。以下协议目前公认为本地：file, *-extension, and widget。如果isLocal设置需要修改，建议在$.ajaxSetup()方法中这样做一次。
             * @type {Boolean}
             */
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            /**
             * (默认: true) 是否触发全局 AJAX 事件。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的 Ajax 事件。
             * @type {Boolean}
             */
            global: true,
            /**
             * (默认: true) 默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认内容类型 "application/x-www-form-urlencoded"。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。
             * @type {Boolean}
             */
            processData: true,
            /*
             (默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。
             */
            async: true,
            /**
             * (默认: "application/x-www-form-urlencoded") 发送信息至服务器时内容编码类型。默认值适合大多数情况。如果你明确地传递了一个content-type给 $.ajax() 那么他必定会发送给服务器（即使没有数据要发送）
             * @type {String}
             */
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",

            /*
             // 设置请求超时时间（毫秒）。此设置将覆盖全局设置。
             timeout: 0,
             data: null,
             dataType: null,
             // 用于响应HTTP访问认证请求的用户名
             username: null,
             // 用于响应HTTP访问认证请求的密码
             password: null,
             // (默认: true,dataType为script和jsonp时默认为false)，设置为 false 将不缓存此页面。
             cache: null,
             throws: false,
             // 如果你想要用传统的方式来序列化数据，那么就设置为true
             traditional: false,
             // 个额外的"{键:值}"对映射到请求一起发送。此设置被设置之前beforeSend函数被调用;因此，消息头中的值设置可以在覆盖beforeSend函数范围内的任何设置。
             headers: {},
             */
            /**
             * 接受的数据的type类型
             * 内容类型发送请求头，告诉服务器什么样的响应会接受返回。如果accepts设置需要修改，推荐在$.ajaxSetup()方法中做一次。
             * @type {Object}
             */
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            /**
             * 一个以"{字符串:正则表达式}"配对的对象，用来确定jQuery将如何解析响应，给定其内容类型。
             * @type {Object}
             */
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            /**
             * 数据转换器
             * 一个数据类型对数据类型转换器的对象。每个转换器的值是一个函数，返回响应的转化值
             * @type {Object}
             */
            converters: {
                // Convert anything to text
                "* text": window.String,
                // Text to html (true = no transformation)
                // true为不转换
                "text html": true,
                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            // 不会被深度拷贝的配置项
            flatOptions: {
                url: true,
                context: true
            }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        // 创建更健壮的配置项到target中，包含了ajaxSettings和settings参数
        // 如果只有一个参数，直接添加到jQuery.ajaxSettings中
        ajaxSetup: function(target, settings) {
            return settings ?
            // Building a settings object
            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :
            // Extending ajaxSettings
            ajaxExtend(jQuery.ajaxSettings, target);
        },

        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),

        // Main method
        ajax: function(url, options) {
            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var // Cross-domain detection vars
            // 跨域检测变量
            parts,
                // Loop variable
                i,
                // URL without anti-cache param
                // 没有破坏缓存参数的url，即不会
                cacheURL,
                // Response headers as string
                responseHeadersString,
                // timeout handle
                // 计时器
                timeoutTimer,

                // To know if global events are to be dispatched
                // 全局事件是否该被触发
                fireGlobals,

                transport,
                // Response headers
                responseHeaders,
                // Create the final options object
                // 最终的ajax配置项
                s = jQuery.ajaxSetup({}, options),
                // Callbacks context
                // 回调函数的上下文
                callbackContext = s.context || s,
                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                // 如果配置项有context则用jQuery对象，否则使用jQuery.event对象
                globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
                // Deferreds
                // 创建一个延迟对象
                deferred = jQuery.Deferred(),
                // 完成延迟的回调列表
                completeDeferred = jQuery.Callbacks("once memory"),
                // Status-dependent callbacks
                // 状态码， 根据status来决定回调
                statusCode = s.statusCode || {},
                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
                // The jqXHR state
                // jqXHR的状态
                state = 0,
                // Default abort message
                // 默认退出信息
                strAbort = "canceled",
                // Fake xhr
                // 伪装的xhr对象
                jqXHR = {
                    readyState: 0,
                    // Builds headers hashtable if needed
                    // 如果需要就创建头部哈希表
                    getResponseHeader: function(key) {
                        var match;
                        // 如果jqXHR的状态为2
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                // 逐个获取已有的头部信息responseHeadersString的key和value值，
                                // 给responseHeaders对象添加key属性和相应的value
                                while ((match = rheaders.exec(responseHeadersString))) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            // 给responseHeaders添加参数key的属性
                            match = responseHeaders[key.toLowerCase()];
                        }
                        // 返回responseHeaders
                        return match == null ? null : match;
                    },

                    // Raw string
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },

                    // Caches the header
                    // 缓存头部
                    setRequestHeader: function(name, value) {
                        var lname = name.toLowerCase();
                        // 如果jqXHR的state小于等于0，
                        // 获取requestHeadersNames的name属性值（没有该属性就添加），
                        // 添加requestHeaders的name属性和对应的value值
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },

                    // Overrides response content-type header
                    // 重写响应的mimeType
                    overrideMimeType: function(type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function(map) {
                        var code;
                        // 如果存在map对象
                        if (map) {
                            // 如果jqXHR的状态小于2，
                            // 说明没有完成
                            if (state < 2) {
                                // 遍历map
                                for (code in map) {
                                    // Lazy-add the new callback in a way that preserves old ones
                                    // 给statusCode对象添加code属性，值为数组，
                                    // 第一个元素存放着旧的值
                                    statusCode[code] = [statusCode[code], map[code]];
                                }

                                // 如果jqXHR大于等于2
                            } else {
                                // Execute the appropriate callbacks
                                // 执行相应的回调
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },
                    // Cancel the request
                    // 取消请求
                    abort: function(statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };

            // Attach deferreds
            // 给jqXHR添加promise的属性和方法，
            // 然后添加complete方法，这里用的是回调列表的add方法（即添加回调）
            // 订阅完成回调
            deferred.promise(jqXHR).complete = completeDeferred.add;
            // success/error 方法则是使用promise的done/fail方法
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;

            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            // dataTypes列表
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [""];

            // A cross-domain request is in order when we have a protocol:host:port mismatch
            // 检测是否需要跨域请求
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !! (parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))));
            }

            // Convert data if not already a string
            // 如果data不是字符串则转换为字符串形式“a=1&b=2&c=3”
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }

            // Apply prefilters
            // 遍历prefilters[dataType]数组，并执行回调，
            // prefilterOrFactory为函数数组元素，
            // 执行该函数如果返回的结果dataTypeOrTransport是字符串且时prefilters且没有被inspected过，
            // 就给options.dataTypes数组头部添加该字符串，
            // 继续递归dataTypeOrTransport(当我们使用json/jsonp的时候会返回“script”，于是会执行“script”相关的回调)。
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            // If request was aborted inside a prefilter, stop there
            if (state === 2) {
                return jqXHR;
            }

            // We can fire global events as of now if asked to
            // 是否触发全局事件
            fireGlobals = s.global;

            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }

            // Uppercase the type
            // 将type转换为大写
            s.type = s.type.toUpperCase();

            // Determine if request has content
            // 请求是否有内容
            s.hasContent = !rnoContent.test(s.type);

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // 保存url
            cacheURL = s.url;

            // More options handling for requests with no content
            if (!s.hasContent) {

                // If data is available, append data to url
                // 如果有data，将data字符串加入到url
                if (s.data) {
                    cacheURL = (s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data);
                    // #9682: remove data so that it's not used in an eventual retry
                    // 删除data属性，防止被重用
                    delete s.data;
                }

                // Add anti-cache in url if needed
                // 如果不需要缓存，则添加破坏缓存时间戳
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ?
                    // If there is already a '_' parameter, set its value
                    // 如果已经存在_字段，则修改它的值
                    cacheURL.replace(rts, "$1_=" + ajax_nonce++) :
                    // Otherwise add one to the end
                    // 否则就在尾部添加
                    cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++;
                }
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            /*
             (默认: false) 仅在服务器数据改变时获取新数据。使用 HTTP 包 Last-Modified 头信息判断。他也会检查服务器指定的'etag'来确定数据没有被修改过。
             */
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }

            // Set the correct header, if data is being sent
            // 设置正确的头信息
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            // Set the Accepts header for the server, depending on the dataType
            // 为服务端添加Accepts头，取决于dataType，
            // 例如dataType为“html”，则value值为"text/html, */*; q=0.01"， s.accepts['html'],
            // 即"text/html"
            // 没有dataType就用“*/*”
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

            // Check for headers option
            // 添加配置项headers的头部请求
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }

            // Allow custom headers/mimetypes and early abort
            // 执行beforeSend方法，如果该函数返回false则推出
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                // Abort if not done already and return
                // canceled
                return jqXHR.abort();
            }

            // aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            // 给回调列表添加回调
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                jqXHR[i](s[i]);
            }

            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            } else {
                // 请求开始
                jqXHR.readyState = 1;

                // Send global event
                // 发送全局事件ajaxSend
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                // Timeout
                // 如果是异步且配置项中timeout有值，
                // 则设置定时器， 当定时期结束时就会执行abort方法
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    // 设置jqXHR的状态为1
                    state = 1;
                    // 创建并发送请求，这里才开始调用原生方法
                    transport.send(requestHeaders, done);
                } catch (e) {
                    // Propagate exception as error if not done
                    // 如果未完成则当错误处理
                    if (state < 2) {
                        done(-1, e);
                        // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }

            // Callback for when everything is done

            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;

                // Called once
                // 只执行一次
                if (state === 2) {
                    return;
                }

                // State is "done" now
                // jqXHR的状态设置为2
                state = 2;

                // Clear timeout if it exists
                // 清除定时器
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                // 取消引用
                transport = undefined;

                // Cache response headers
                // 缓存响应头
                responseHeadersString = headers || "";

                // Set readyState
                // 设置readyState， 根据state来判断
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Get response data
                // 获取响应的数据， 这里会使用ajaxHandleResponses来处理响应内容
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }

                // If successful, handle type chaining
                // 请求成功时
                if (status >= 200 && status < 300 || status === 304) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    // 如果处于ifModified模式， 设置If-Modified-Since和/或者If-None-Match header
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }

                    // if no content
                    // 如果没有内容
                    if (status === 204) {
                        isSuccess = true;
                        statusText = "nocontent";

                        // if not modified
                        // 如果没有被修改
                    } else if (status === 304) {
                        isSuccess = true;
                        statusText = "notmodified";

                        // If we have data, let's convert it
                        // 如果有数据就转换它
                    } else {
                        isSuccess = ajaxConvert(s, response);
                        statusText = isSuccess.state;
                        success = isSuccess.data;
                        error = isSuccess.error;
                        isSuccess = !error;
                    }

                    // 请求失败时
                } else {
                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                // 给伪装的jqXHR附加属性
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                // Success/Error
                // 触发成功/失败回调
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }

                // Status-dependent callbacks
                // 根据statusCode对应的状态码属性触发相应的回调
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                    // 触发全局ajaxSuccess方法
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }

                // Complete
                // 触发complete方法
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                    // 触发全局ajaxComplete方法
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    // Handle the global AJAX counter
                    // 如果active<=0，触发ajaxStop方法
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            return jqXHR;
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        }
    });

    /* Handles responses to an ajax request:
     * - sets all responseXXX fields accordingly
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    // 给s.dataTypes头部添加“*”或"text"，给ajaxConvert使用

    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type,
            // /xml/ | /html/ | /json/
            contents = s.contents,
            dataTypes = s.dataTypes,
            // responseXML|responseText
            responseFields = s.responseFields;

        // Fill responseXXX fields
        // 给jqXHR填充responseXML/responseText
        for (type in responseFields) {
            if (type in responses) {
                jqXHR[responseFields[type]] = responses[type];
            }
        }

        // Remove auto dataType and get content-type in the process
        // 遍历删除“*”开头的dataTypes数组元素，然后获取content-type
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }

        // Check if we're dealing with a known content-type
        // 检查我们正在处理的是否是一致的content-type
        // 如果是就给dataTypes数组的头部添加type
        /**
         * contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            }
         */
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        // 检查我们的响应是否是预期的dataType
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];

            // 如果不是， 尝试转换dataTypes
        } else {
            // Try convertible dataTypes
            for (type in responses) {
                // 如果此时dataTypes数组第一个元素没有值或者可以匹配到converters，
                // 取得最终的finalDataType，结束循环
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            // text | *
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        // 如果finalDataType不是dataTypes中的第一个元素，
        // 我们将它添加到第一个，
        // 返回responses[finalDataType]
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                // 给dataTypes数组的第一个元素添加"text"或"*"
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }

    // Chain conversions given the request and the original response
    // 转换响应的数据

    function ajaxConvert(s, response) {
        var conv2, current, conv, tmp, converters = {},
            i = 0,
            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice(),
            // "*" |"text"
            prev = dataTypes[0];

        // Apply the dataFilter if provided
        /**
         * 给Ajax返回的原始数据的进行预处理的函数。提供data和type两个参数：data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。
         */
        if (s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
        }

        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }

        // Convert to each sequential dataType, tolerating list modification
        for (;
            (current = dataTypes[++i]);) {

            // There's only work to do if current dataType is non-auto
            if (current !== "*") {

                // Convert response if prev dataType is non-auto and differs from current
                if (prev !== "*" && prev !== current) {

                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];

                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {

                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {

                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];

                                        // Otherwise, insert the intermediate dataType
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.splice(i--, 0, current);
                                    }

                                    break;
                                }
                            }
                        }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {

                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }

                // Update prev for next iteration
                prev = current;
            }
        }

        return {
            state: "success",
            data: response
        };
    }

    // Install script dataType
    // 给jQuery.ajaxSettings添加相应的数据（深度拷贝）
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

    // Handle cache's special case and global
    // 给prefilters['script']数组尾部添加回调,
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        // 跨域请求限制
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });

    // Bind script tag hack transport
    // 给transports['script']数组尾部添加回调
    jQuery.ajaxTransport("script", function(s) {

        // This transport only deals with cross domain requests
        // 该分发器只处理跨域请求
        if (s.crossDomain) {

            var script,
                head = document.head || jQuery("head")[0] || document.documentElement;

            return {

                send: function(_, callback) {
                    // 创建一个script标签，添加相应属性
                    script = document.createElement('script');

                    script.async = true;

                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }

                    script.src = s.url;

                    // Attach handlers for all browsers
                    // 为所有浏览器添加事件处理器
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        // 如果script加载完毕或者isAbort为true
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

                            // Handle memory leak in IE
                            // 处理IE的内存泄露
                            script.onload = script.onreadystatechange = null;

                            // Remove the script
                            // 删除script标签
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }

                            // Dereference the script
                            script = null;

                            // Callback if not abort
                            // 如果isAbort部位true执行callback
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };

                    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    // 插入到头部避免IE6的bug
                    head.insertBefore(script, head.firstChild);
                },
                // 退出的时候执行的回调
                abort: function() {
                    if (script) {
                        script.onload(undefined, true);
                    }
                }
            };
        }
    });
    var oldCallbacks = [],
        // 匹配=?或者??
        rjsonp = /(=)\?(?=&|$)|\?\?/;

    // Default jsonp settings
    // 为jQuery.ajaxSettings添加jsonp属性和jsonpCallback方法
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            // TODO
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (ajax_nonce++));
            this[callback] = true;
            return callback;
        }
    });

    // Detect, normalize options and install callbacks for jsonp requests
    // 给prefilters['json']和prefilters['jsonp']数组添加回调
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {

        var callbackName, overwritten, responseContainer,
            /*
         在一个jsonp请求中重写回调函数的名字。这个值用来替代在"callback=?"这种GET或POST请求中URL参数里的"callback"部分，比如{jsonp:'onJsonPLoad'}会导致将"onJsonPLoad=?"传给服务器。
         */
            // 如果url中包含了=?或者??，用“url”,否则如果data中有就用"data"
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
                "url" :
                typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data"
            );

        // Handle if the expected data type is "jsonp" or we have a parameter to set
        // 如果有jsonProp或者第一个data-type是"jsonp"
        if (jsonProp || s.dataTypes[0] === "jsonp") {

            // Get callback name, remembering preexisting value associated with it
            // 获取回调名称，如果是函数就将函数返回值当做名称
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;

            // Insert callback into url or form data
            // 如果有jsonProp，将s[jsonProp]的=?替换成=callbackName
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                // 否则如果s.jsonp为true,直接在url上面添加
                s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            // 当script执行后使用converter取回json对象
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };

            // force json dataType
            // 强制将dataType数组第一个元素设为“json”
            s.dataTypes[0] = "json";

            // Install callback
            // 安装回调
            // 先用个变量保存以前callback的内容
            overwritten = window[callbackName];
            window[callbackName] = function() {
                // responseContainer为参数，其中第一个参数是服务端返回的json对象
                responseContainer = arguments;
            };

            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // Restore preexisting value
                window[callbackName] = overwritten;

                // Save back as free
                if (s[callbackName]) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    // save the callback name for future use
                    oldCallbacks.push(callbackName);
                }

                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
            });

            // Delegate to script
            return "script";
        }
    });
    var xhrCallbacks, xhrSupported,
        xhrId = 0,
        // #5280: Internet Explorer will keep connections alive if we don't abort on unload
        xhrOnUnloadAbort = window.ActiveXObject && function() {
            // Abort all pending requests
            var key;
            for (key in xhrCallbacks) {
                xhrCallbacks[key](undefined, true);
            }
        };

    // Functions to create xhrs
    // 创建标准的XHR对象

    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }

    // 创建IE的XHR对象

    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }

    // Create the request object
    // (This is still attached to ajaxSettings for backward compatibility)
    // 如果支持ActiveXObject对象，先试着创建标准的XHR，不行就使用ActiveXObject，
    // 否则就使用标准的xhr对象
    jQuery.ajaxSettings.xhr = window.ActiveXObject ?
    /* Microsoft failed to properly
     * implement the XMLHttpRequest in IE7 (can't request local files),
     * so we use the ActiveXObject when it is available
     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
     * we need a fallback.
     */

    function() {
        return !this.isLocal && createStandardXHR() || createActiveXHR();
    } :
    // For all other browsers, use the standard XMLHttpRequest object
    createStandardXHR;

    // Determine support properties
    // 检测浏览器是否支持ajax
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !! xhrSupported && ("withCredentials" in xhrSupported);
    xhrSupported = jQuery.support.ajax = !! xhrSupported;

    // Create transport if the browser can provide an xhr
    if (xhrSupported) {
        // 给 transports['*']数组添加回调
        jQuery.ajaxTransport(function(s) {
            // Cross domain only allowed if supported through XMLHttpRequest
            // 不进行跨域请求或者只有支持XMLHttpRequest跨域请求的才符合条件
            if (!s.crossDomain || jQuery.support.cors) {

                var callback;

                return {
                    send: function(headers, complete) {

                        // Get a new xhr
                        var handle, i,
                            // 创建一个xhr的实例
                            xhr = s.xhr();

                        // Open the socket
                        // Passing null username, generates a login popup on Opera (#2865)
                        // 如果有username就传username和password
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        } else {
                            // 否则直接传
                            xhr.open(s.type, s.url, s.async);
                        }

                        // Apply custom fields if provided
                        /*
                         对“文件名-文件值”在本机设置XHR对象。例如，如果需要的话，你可以用它来设置withCredentials为true的跨域请求。
                         */
                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[i] = s.xhrFields[i];
                            }
                        }

                        // Override mime type if needed
                        // 重写mimeType
                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType);
                        }

                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        // 如果没有跨域且头没有"X-Requested-With"属性，添加
                        if (!s.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }

                        // Need an extra try/catch for cross domain requests in Firefox 3
                        // 需要为FF3捕获错误
                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i]);
                            }
                        } catch (err) {}

                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        // 真正的发送请求了
                        xhr.send((s.hasContent && s.data) || null);

                        // Listener
                        callback = function(_, isAbort) {
                            var status, responseHeaders, statusText, responses;

                            // Firefox throws exceptions when accessing properties
                            // of an xhr when a network error occurred
                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                            // 当网络发生错误的时候，FF会报错
                            try {

                                // Was never called and is aborted or complete
                                // callback从未被执行且（需要退出请求或者已经请求完毕）
                                if (callback && (isAbort || xhr.readyState === 4)) {

                                    // Only called once
                                    // 重写自己确保只执行一次
                                    callback = undefined;

                                    // Do not keep as active anymore
                                    // 这里的handle时xhrId，
                                    // 我们需要注销有关信息
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[handle];
                                        }
                                    }

                                    // If it's an abort
                                    // 如果需要退出请求，当请求还没执行完毕时，执行abort方法
                                    if (isAbort) {
                                        // Abort it manually if needed
                                        if (xhr.readyState !== 4) {
                                            xhr.abort();
                                        }
                                    } else {
                                        responses = {};
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();

                                        // When requesting binary data, IE6-9 will throw an exception
                                        // on any attempt to access responseText (#11426)
                                        if (typeof xhr.responseText === "string") {
                                            responses.text = xhr.responseText;
                                        }

                                        // Firefox throws an exception when accessing
                                        // statusText for faulty cross-domain requests
                                        try {
                                            statusText = xhr.statusText;
                                        } catch (e) {
                                            // We normalize with Webkit giving an empty statusText
                                            statusText = "";
                                        }

                                        // Filter status for non standard behaviors

                                        // If the request is local and we have data: assume a success
                                        // (success with no data won't get notified, that's the best we
                                        // can do given current implementations)
                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404;
                                            // IE - #1450: sometimes returns 1223 when it should be 204
                                        } else if (status === 1223) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException);
                                }
                            }

                            // Call complete if needed
                            if (responses) {
                                complete(status, statusText, responses, responseHeaders);
                            }
                        };

                        if (!s.async) {
                            // if we're not in sync mode we fire the callback
                            // 如果是同步请求，我们立刻执行回调
                            callback();
                        } else if (xhr.readyState === 4) {
                            // (IE6 & IE7) if it's in cache and has been
                            // retrieved directly we need to fire the callback
                            // 如果请求成功后直接执行callback
                            setTimeout(callback);
                        } else {
                            handle = ++xhrId;
                            // IE会保持连接，只有在unload事件中退出请求
                            if (xhrOnUnloadAbort) {
                                // Create the active xhrs callbacks list if needed
                                // and attach the unload handler
                                if (!xhrCallbacks) {
                                    xhrCallbacks = {};
                                    jQuery(window).unload(xhrOnUnloadAbort);
                                }
                                // Add to list of active xhrs callbacks
                                // 给激活的xhr列表添加回调
                                xhrCallbacks[handle] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },

                    abort: function() {
                        if (callback) {
                            callback(undefined, true);
                        }
                    }
                };
            }
        });
    }

    var fxNow,
        // 使用一个ID来执行动画setInterval 
        timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        // eg: +=30.5px
        // 执行exec匹配["+=30.5px", "+", "30.5", "px"]
        rfxnum = new RegExp('^(?:([+-])=|)(' + core_pnum + ')([a-z%]*)$', 'i'),
        // 以“queueHooks”结尾
        rrun = /queueHooks$/,
        animationPrefilters = [defaultPrefilter],
        tweeners = {
            // 在动画前再次对动画参数做调整
            '*': [
                function(prop, value) {
                    var end, unit,
                        // this指向animation对象
                        // 返回一个Tween构造函数实例
                        tween = this.createTween(prop, value),
                        // eg:["+=30.5px", "+", "30.5", "px"]
                        parts = rfxnum.exec(value),
                        // 计算当前属性样式值
                        target = tween.cur(),
                        start = +target || 0,
                        scale = 1,
                        maxIterations = 20;

                    if (parts) {
                        // 数值
                        end = +parts[2];
                        // 单位
                        // jQuery.cssNumber里面的值是不需要单位的
                        unit = parts[3] || (jQuery.cssNumber[prop] ? '' : 'px');

                        // We need to compute starting value
                        // 我们需要计算开始值
                        if (unit !== 'px' && start) {
                            // Iteratively approximate from a nonzero starting point
                            // Prefer the current property, because this process will be trivial if it uses the same units
                            // Fallback to end or a simple constant
                            // 尝试从元素样式中获取开始值
                            start = jQuery.css(tween.elem, prop, true) || end || 1;

                            do {
                                // If previos iteration zeroed out, double until we get *something*
                                // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                                scale = scale || '.5';

                                // Adjust and apply
                                start = start / scale;
                                jQuery.style(tween.elem, prop, start + unit);

                                // Update scale, tolerating zero or NaN from tween.cur()
                                // And breaking the loop if scale is unchanged or perfect. or if we've just had enough
                            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                        }

                        tween.unit = unit;
                        tween.start = start;
                        // If a +=/-= token was provided, we're doing a relative animation
                        tween.end = parts[1] ? start + (parts[1] + 1) * end : end;
                    }
                    return tween;
                }
            ]
        };

    // Animations created synchronous will run synchronously
    // TODO
    // 返回一个时间戳，然后用setTimeout延时将fxNow设置为undefined

    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return (fxNow = jQuery.now());
    }

    function createTweens(animation, props) {
        // 遍历props动画属性对象，并执行回调
        jQuery.each(props, function(prop, value) {
            // 如果tweeners[prop]数组存在，将它和tweeners['*']连接
            var collection = (tweeners[prop] || []).concat(tweeners['*']),
                index = 0,
                length = collection.length;

            // 遍历函数数组
            for (; index < length; index++) {
                // 如果该函数有返回值，且==true，退出函数
                if (collection[index].call(animation, prop, value)) {
                    // We're done with this property
                    return;
                }
            }
        });
    }

    function Animation(elem, properties, options) {
        var result, stopped, index = 0,
            length = animationPrefilters.length,
            // deferred无论成功还是失败都会删除elem元素
            deferred = jQuery.Deferred().always(function() {
                // don't match elem in the :animated selector
                // 在“:animated”选择器中不会匹配到它们
                delete tick.elem;
            }),
            tick = function() {
                if (stopped) {
                    return false;
                }
                var // 计算当前动画时间戳
                    currentTime = fxNow || createFxNow(),
                    // 结束时间减当前时间，计算出剩余时间
                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                    // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
                    // 剩余时间百分比
                    temp = remaining / animation.duration || 0,
                    // 已执行百分比
                    percent = 1 - temp,
                    index = 0,
                    // 动画属性对应的tweens
                    length = animation.tweens.length;

                // 遍历tweens，并执行对应的run方法，将已执行百分比通过传参传入
                // run方法通过缓动算法计算出样式值，然后应用到元素上
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }

                // 触发notify回调列表
                deferred.notifyWith(elem, [animation, percent, remaining]);

                // 如果执行进度为完成且tweens数组有元素
                // 返回剩余时间
                if (percent < 1 && length) {
                    return remaining;
                } else {
                    // 否则表示已完成，触发resolve回调列表，
                    // 并返回false值
                    deferred.resolveWith(elem, [animation]);
                    return false;
                }
            },
            animation = deferred.promise({
                // 动画元素
                elem: elem,
                // 需要动画的属性
                props: jQuery.extend({}, properties),
                // 给optall添加specialEasing属性对象
                opts: jQuery.extend(true, {
                    specialEasing: {}
                }, options),
                // 原始动画属性
                originalProperties: properties,
                // 原始的配置项optall
                originalOptions: options,
                // 动画开始时间，使用当前时间的毫秒数
                startTime: fxNow || createFxNow(),
                // 动画时长
                duration: options.duration,
                tweens: [],
                createTween: function(prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function(gotoEnd) {
                    var index = 0,
                        // if we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }

                    // resolve when we played the last frame
                    // otherwise, reject
                    if (gotoEnd) {
                        deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                        deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                }
            }),
            props = animation.props;

        /*
        将是动画属性转换成驼峰式，并设置其相应的缓动属性，
        如果存在cssHooks钩子对象，则需要另作一番处理
         */
        propFilter(props, animation.opts.specialEasing);

        // 遍历动画预过滤器，并执行回调
        // 其中defaultPrefilter为默认预过滤器，每次都会执行
        for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            // 如果有返回值，退出函数
            if (result) {
                return result;
            }
        }

        createTweens(animation, props);

        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }

        // 开始执行动画
        jQuery.fx.timer(
            jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            }));

        // attach callbacks from options
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }

    /**
     * 动画属性调整与过滤
     * 
     * 将是动画属性转换成驼峰式，并设置其相应的缓动属性，
     * 如果存在cssHooks钩子对象，则需要另作一番处理
     * @param  {[type]} props         [需要动画的属性]
     * @param  {[type]} specialEasing [description]
     * @return {[type]}               [description]
     */
    function propFilter(props, specialEasing) {
        var value, name, index, easing, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
            // 驼峰化属性
            name = jQuery.camelCase(index);
            // TODO
            easing = specialEasing[name];
            // 属性值
            value = props[index];
            // 如果属性值是数组
            if (jQuery.isArray(value)) {
                easing = value[1];
                // 取数组第一个元素为属性值
                value = props[index] = value[0];
            }

            // 如果属性名精过驼峰化后，删除原有的属性名，减少占用内存
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }

            // 处理兼容性的钩子对象
            hooks = jQuery.cssHooks[name];
            // 如果存在钩子对象且有expand属性
            if (hooks && "expand" in hooks) {
                // 返回expand处理后的value值
                // 该类型是一个对象，属性是
                // (margin|padding|borderWidth)(Top|Right|Bottom|Left)
                value = hooks.expand(value);

                // 我们已经不需要name属性了
                delete props[name];

                // not quite $.extend, this wont overwrite keys already present.
                // also - reusing 'index' from above because we have the correct "name"
                for (index in value) {
                    // 如果props没有(margin|padding|borderWidth)(Top|Right|Bottom|Left)属性
                    // 添加该属性和对应的值，并设置缓动属性
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                // 没有钩子对象就直接设置其为缓动属性
                specialEasing[name] = easing;
            }
        }
    }

    jQuery.Animation = jQuery.extend(Animation, {

        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"];
            } else {
                props = props.split(" ");
            }

            var prop, index = 0,
                length = props.length;

            for (; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        // 为animationPrefilters回调数组添加回调
        prefilter: function(callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });

    /**
     * 动画预处理
     * 添加fx队列缓存（没有的话），对动画属性“width/height，overflow”， 值有“toggle/show/hide”采取的一些措施
     * 
     * @param  {[type]} elem  [动画元素]
     * @param  {[type]} props [动画属性]
     * @param  {[type]} opts  [动画配置项]
     * @return {[type]}       [description]
     */
    function defaultPrefilter(elem, props, opts) { /*jshint validthis:true */
        var prop, index, length, value, dataShow, toggle, tween, hooks, oldfire,
            // animation对象（同时是个deferred对象）
            anim = this,
            style = elem.style,
            orig = {},
            handled = [],
            hidden = elem.nodeType && isHidden(elem);

        // handle queue: false promises
        if (!opts.queue) {
            // 获取或者设置动画队列钩子
            hooks = jQuery._queueHooks(elem, "fx");
            // 如果hooks.unqueued为null/undefined
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                // 获取旧的empty回调对象
                // 用于清除动画队列缓存
                oldfire = hooks.empty.fire;
                // 装饰，添加新的职责
                hooks.empty.fire = function() {
                    // 当hooks.unqueued为0时执行清除动画队列缓存
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;

            anim.always(function() {
                // doing this makes sure that the complete handler will be called
                // before this completes
                // 延迟处理，确保该回调完成才调用下面回调
                anim.always(function() {
                    hooks.unqueued--;
                    // 如果动画队列没有元素了，清空缓存
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }

        // height/width overflow pass
        // 对width或height的DOM元素的动画前的处理
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE does not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            // IE不会改变overflow属性当iverflowX和overflowY的值相同时。
            // 因此我们要记录三个overflow的属性
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            // 将inline元素（非浮动的）设置为inline-block或者BFC(iE6/7)，使它们的width和height可改变
            if (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") {

                // inline-level elements accept inline-block;
                // block-level elements need to be inline with layout
                if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
                    style.display = "inline-block";

                } else {
                    style.zoom = 1;
                }
            }
        }

        if (opts.overflow) {
            style.overflow = "hidden";
            // 如果不支持父元素随着子元素宽度改变而改变
            // 动画结束后将style设置为初始状态
            if (!jQuery.support.shrinkWrapBlocks) {
                anim.always(function() {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2];
                });
            }
        }


        // show/hide pass
        // 遍历动画属性
        for (index in props) {
            // 获取目标值
            value = props[index];
            // 判断值是否有toggle|show|hide
            if (rfxtypes.exec(value)) {
                delete props[index];
                // 是否需要toggle
                toggle = toggle || value === "toggle";
                // 如果hide（或者show）状态的初始值和我们动画的值相同，就不需要做处理
                if (value === (hidden ? "hide" : "show")) {
                    continue;
                }
                // 将需要show/hide/toggle的属性保存到handled数组中
                handled.push(index);
            }
        }

        length = handled.length;
        // 如果handled数组有元素
        // 对需要toggle|show|hide的属性处理
        if (length) {
            // 获取或者设置元素的fxshow缓存（保存显示状态）
            dataShow = jQuery._data(elem, "fxshow") || jQuery._data(elem, "fxshow", {});
            // 如果元素已经有hidden属性，说明我们设置过了，
            // 取该值
            if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
            }

            // store state if its toggle - enables .stop().toggle() to "reverse"
            // 如果需要toggle，将hidden状态取反
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            // 如果元素隐藏了就显示出来，为了后期的动画
            if (hidden) {
                jQuery(elem).show();
            } else {
                // 否则动画结束后才隐藏
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            // 动画结束后删除fxshow缓存，并恢复元素原始样式
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (index = 0; index < length; index++) {
                prop = handled[index];
                // 创建Tween实例
                tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);
                // 获取元素原始样式值
                orig[prop] = dataShow[prop] || jQuery.style(elem, prop);

                // 如果dataShow引用的缓存没有show|hide|toggle属性
                if (!(prop in dataShow)) {
                    // 添加该属性，并赋初值
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        }
    }

    // 实例化init构造函数
    // 对单个动画属性，在初始化的时候计算开始值
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];

            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        // 通过缓动算法计算出样式值，然后应用到元素上
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];

            // 当前执行位置，
            // 如果有时长，就用缓动算法
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](
                    percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            // 当前时间戳
            this.now = (this.end - this.start) * eased + this.start;

            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }

            // 有钩子对象就执行set方法，否则使用默认set方法
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
        _default: {
            // 默认的获取样式初始值方法
            get: function(tween) {
                var result;

                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }

                // passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails
                // so, simple values such as "10px" are parsed to Float.
                // complex values such as "rotate(1rad)" are returned as is.
                result = jQuery.css(tween.elem, tween.prop, "");
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            // 设置元素样式
            set: function(tween) {
                // use step hook for back compat - use cssHook if its there - use .style if its
                // available and use plain properties where available
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };

    // Remove in 2.0 - this supports IE8's panic based approach
    // to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };

    jQuery.each(["toggle", "show", "hide"], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });

    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {

            // show any hidden elements after setting opacity to 0
            return this.filter(isHidden).css("opacity", 0).show()

            // animate to the value specified
            .end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var // prop对象是否为空
                empty = jQuery.isEmptyObject(prop),
                // 返回{complete, duration, easing, queue, old}
                optall = jQuery.speed(speed, easing, callback),
                // TODO
                doAnimation = function() {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    doAnimation.finish = function() {
                        anim.stop(true);
                    };
                    // Empty animations, or finishing resolves immediately
                    if (empty || jQuery._data(this, "finish")) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;

                // 如果prop为空对象或者queue为false(即不进行动画队列)，
                // 遍历元素集并执行doAnimation回调
            return empty || optall.queue === false ? this.each(doAnimation) :
                // 否则prop不为空且需要队列执行，
                // 将doAnimation添加到该元素的队列中
                // jQuery.queue('fx', doAnimation)
                this.queue(optall.queue, doAnimation);
        },
        // 停止所有在指定元素上正在运行的动画。
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };

            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }

            return this.each(function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = jQuery._data(this);

                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }

                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }

                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index, data = jQuery._data(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                // enable finishing flag on private data
                data.finish = true;

                // empty the queue first
                jQuery.queue(this, type, []);

                if (hooks && hooks.cur && hooks.cur.finish) {
                    hooks.cur.finish.call(this);
                }

                // look for any active animations, and finish them
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }

                // look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }

                // turn off finishing flag
                delete data.finish;
            });
        }
    });

    // Generate parameters to create a standard animation
    /**
     * 用于填充slideDown/slideUp/slideToggle动画参数
     * @param  {[String]} type         [show/hide/toggle]
     * @param  {[type]} includeWidth [是否需要包含宽度]
     * @return {[type]}              [description]
     */
    function genFx(type, includeWidth) {
        var which,
            attrs = {
                height: type
            },
            i = 0;

        // if we include width, step value is 1 to do all cssExpand values,
        // if we don't include width, step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        // 不包含宽度，which就取“Top/Bottom”，
        // 否则“Left/Right”
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });

    /**
     * 配置动画参数
     * 
     * 配置动画时长，动画结束回调（经装饰了），缓动算法，queue属性用来标识是动画队列
     * @param  {[Number|Objecct]}   speed  [动画时长]
     * @param  {[Function]}   easing [缓动算法]
     * @param  {Function} fn     [动画结束会掉]
     * @return {[Object]}          [description]
     */
    jQuery.speed = function(speed, easing, fn) {
        var opt =
            // speed是否为对象
            speed && typeof speed === "object" ?
            // 如果是，克隆speed对象
            jQuery.extend({}, speed) :
            // 否则返回一个新的对象
            {
                // complete是我们的animate的回调方法，
                // 即动画结束时的回调
                // (speed, easing, fn)
                // (speed || easing, fn)
                // (fn)
                complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                // 动画时长
                duration: speed,
                // 缓动
                easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };

        opt.duration =
            // jQuery.fx.off是否为真，如果是则将opt.duration设置为0，
            // 这将会停止所有动画
            jQuery.fx.off ? 0 :
            // 否则判断duration属性值是否为数字类型，是则使用 
            typeof opt.duration === "number" ? opt.duration :
            // 否则判断duration属性值字符串是否在jQuery.fx.speeds(jQuery的预配置动画时长)属性key字段中，是则使用 
            opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] :
            // 否则就是用默认动画时长
            jQuery.fx.speeds._default;

        // normalize opt.queue - true/undefined/null -> "fx"
        // 如果opt.queue的值是true/undefined/null之一，
        // 将其值设置为"fx"字符串，标示动画队列
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }

        // Queueing
        // 将旧的回调（即我们添加的回调）存入opt.old
        opt.old = opt.complete;

        // 给opt.complete重新定义，
        // 在旧方法中通过装饰包装
        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                // 执行我们的回调
                opt.old.call(this);
            }

            // 如果有队列，执行我们下一个队列
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };

        // 返回opt
        /*
        {complete, duration, easing, queue, old}
         */
        return opt;
    };

    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        }
    };

    // 全局timers数组，保存着所有动画tick
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    // setInterval回调
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers,
            i = 0;

        fxNow = jQuery.now();

        // 遍历所有tick
        for (; i < timers.length; i++) {
            timer = timers[i];
            // Checks the timer has not already been removed
            // 如果当前tick返回的为假（经弱转换）
            // 移除该tick
            // 然后继续遍历当前项，因为数组长度被改变了
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }

        // 如果没有tick回调了，停止定时器
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };

    /**
     * 
     * 
     * @param  {Object} timer tick回调
     */
    jQuery.fx.timer = function(timer) {
        if (timer() && jQuery.timers.push(timer)) {
            jQuery.fx.start();
        }
    };

    jQuery.fx.interval = 13;

    // 动画正式开始
    jQuery.fx.start = function() {
        if (!timerId) {
            // 间隔执行jQuery.fx.tick
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };

    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };

    // Back Compat <1.8 extension point
    jQuery.fx.step = {};

    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function(elem) {
            return jQuery.grep(jQuery.timers, function(fn) {
                return elem === fn.elem;
            }).length;
        };
    }

    jQuery.fn.offset = function(options) {
        if (arguments.length) {
            return options === undefined ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
        }

        var docElem, win, box = {
                top: 0,
                left: 0
            },
            elem = this[0],
            doc = elem && elem.ownerDocument;

        if (!doc) {
            return;
        }

        docElem = doc.documentElement;

        // Make sure it's not a disconnected DOM node
        if (!jQuery.contains(docElem, elem)) {
            return box;
        }

        // If we don't have gBCR, just use 0,0 rather than error
        // BlackBerry 5, iOS 3 (original iPhone)
        if (typeof elem.getBoundingClientRect !== core_strundefined) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow(doc);
        return {
            top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
            left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
        };
    };

    jQuery.offset = {

        setOffset: function(elem, options, i) {
            var position = jQuery.css(elem, "position");

            // set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }

            var curElem = jQuery(elem),
                curOffset = curElem.offset(),
                curCSSTop = jQuery.css(elem, "top"),
                curCSSLeft = jQuery.css(elem, "left"),
                calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
                props = {},
                curPosition = {},
                curTop, curLeft;

            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }

            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }

            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }

            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };


    jQuery.fn.extend({

        position: function() {
            if (!this[0]) {
                return;
            }

            var offsetParent, offset, parentOffset = {
                    top: 0,
                    left: 0
                },
                elem = this[0];

            // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
            if (jQuery.css(elem, "position") === "fixed") {
                // we assume that getBoundingClientRect is available when computed position is fixed
                offset = elem.getBoundingClientRect();
            } else {
                // Get *real* offsetParent
                offsetParent = this.offsetParent();

                // Get correct offsets
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }

                // Add offsetParent borders
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }

            // Subtract parent offsets and element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },

        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || document.documentElement;
                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || document.documentElement;
            });
        }
    });


    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);

        jQuery.fn[method] = function(val) {
            return jQuery.access(this, function(elem, method, val) {
                var win = getWindow(elem);

                if (val === undefined) {
                    return win ? (prop in win) ? win[prop] : win.document.documentElement[method] : elem[method];
                }

                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());

                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });

    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
    }
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            // margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

                return jQuery.access(this, function(elem, type, value) {
                    var doc;

                    if (jQuery.isWindow(elem)) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement["client" + name];
                    }

                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;

                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                        // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                        return Math.max(
                            elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }

                    return value === undefined ?
                    // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css(elem, type, extra) :

                    // Set width or height on the element
                    jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });

    window.jQuery = window.$ = jQuery;

    // Expose jQuery as an AMD module, but only for AMD loaders that
    // understand the issues with loading multiple versions of jQuery
    // in a page that all might call define(). The loader will indicate
    // they have special allowances for multiple jQuery versions by
    // specifying define.amd.jQuery = true. Register as a named module,
    // since jQuery can be concatenated with other files that may use define,
    // but not use a proper concatenation script that understands anonymous
    // AMD modules. A named AMD is safest and most robust way to register.
    // Lowercase jquery is used because AMD module names are derived from
    // file names, and jQuery is normally delivered in a lowercase file name.
    // Do this after creating the global so that if an AMD module wants to call
    // noConflict to hide this version of jQuery, it will work.
    if (typeof define === "function" && define.amd && define.amd.jQuery) {
        define("jquery", [], function() {
            return jQuery;
        });
    }

})(window);
